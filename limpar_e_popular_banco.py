#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script CORRIGIDO para popular o banco PostgreSQL - VERS√ÉO 3.0
‚úÖ CORRE√á√ÉO CR√çTICA: Mapeamento e importa√ß√£o do campo "envio_final"
‚úÖ DEBUGGING AVAN√áADO: Rastreamento completo da importa√ß√£o
‚úÖ MAPEAMENTO INTELIGENTE: Detec√ß√£o autom√°tica de colunas com espa√ßos/caracteres especiais
‚úÖ NOVAS FUNCIONALIDADES: Sistema de baixas, varia√ß√µes temporais, alertas autom√°ticos
"""

import pandas as pd
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime, timedelta
import os
import re
import json

# Configura√ß√£o do banco PostgreSQL  
DB_CONFIG = {
    'host': 'localhost',
    'database': 'dashboard_baker',
    'user': 'postgres',
    'password': 'senha123',
    'port': 5432
}

def carregar_configuracao_env():
    """Carrega configura√ß√£o do arquivo .env se existir"""
    if os.path.exists('.env'):
        try:
            with open('.env', 'r', encoding='utf-8') as f:
                for linha in f:
                    linha = linha.strip()
                    if linha and not linha.startswith('#') and '=' in linha:
                        chave, valor = linha.split('=', 1)
                        if chave == 'DB_HOST':
                            DB_CONFIG['host'] = valor
                        elif chave == 'DB_NAME':
                            DB_CONFIG['database'] = valor
                        elif chave == 'DB_USER':
                            DB_CONFIG['user'] = valor
                        elif chave == 'DB_PASSWORD':
                            DB_CONFIG['password'] = valor
                        elif chave == 'DB_PORT':
                            DB_CONFIG['port'] = int(valor)
        except:
            pass

def conectar_banco():
    """Conecta ao banco de dados PostgreSQL"""
    try:
        carregar_configuracao_env()
        conn = psycopg2.connect(**DB_CONFIG)
        print("‚úÖ Conectado ao banco PostgreSQL")
        return conn
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao banco: {e}")
        return None

def carregar_csv_com_deteccao_avancada():
    """Carrega CSV com detec√ß√£o avan√ßada de encoding e formato"""
    
    # Buscar arquivo CSV com nomes poss√≠veis
    arquivos_possiveis = [
        "Status Faturamento   Ctes vs Faturas vs Atestos.csv",
        "Status Faturamento Ctes vs Faturas vs Atestos.csv",
        "Status Faturamento.csv",
        "Relat√≥rio Faturamento Baker.csv"
    ]
    
    arquivo = None
    for arquivo_teste in arquivos_possiveis:
        if os.path.exists(arquivo_teste):
            arquivo = arquivo_teste
            print(f"üéØ Arquivo encontrado automaticamente: {arquivo}")
            break
    
    if not arquivo:
        # Procurar qualquer CSV
        arquivos_csv = [f for f in os.listdir('.') if f.endswith('.csv')]
        if arquivos_csv:
            print("\nüìã Arquivos CSV encontrados:")
            for i, arq in enumerate(arquivos_csv, 1):
                print(f"   {i}. {arq}")
            
            try:
                escolha = int(input(f"\nEscolha o arquivo (1-{len(arquivos_csv)}): ")) - 1
                if 0 <= escolha < len(arquivos_csv):
                    arquivo = arquivos_csv[escolha]
            except:
                return None, None
        else:
            print("‚ùå Nenhum arquivo CSV encontrado")
            return None, None
    
    print(f"üìÇ Carregando: {arquivo}")
    print(f"üìÅ Tamanho: {os.path.getsize(arquivo) / 1024:.1f} KB")
    
    # CONFIGURA√á√ïES AVAN√áADAS DE CARREGAMENTO
    configuracoes = [
        {'sep': ';', 'encoding': 'utf-8'},
        {'sep': ';', 'encoding': 'cp1252'},      # Windows-1252 (mais comum)
        {'sep': ';', 'encoding': 'latin1'},       # ISO-8859-1
        {'sep': ';', 'encoding': 'utf-8-sig'},    # UTF-8 with BOM
        {'sep': ',', 'encoding': 'utf-8'},        # CSV ingl√™s
        {'sep': ',', 'encoding': 'cp1252'},
        {'sep': '\t', 'encoding': 'utf-8'},       # TSV
        {'sep': '\t', 'encoding': 'cp1252'},
    ]
    
    df = None
    config_usada = None
    
    for i, config in enumerate(configuracoes, 1):
        try:
            print(f"   üîÑ Tentativa {i}: {config}")
            df = pd.read_csv(arquivo, on_bad_lines='skip', **config)
            config_usada = config
            print(f"   ‚úÖ Sucesso com: {config}")
            break
        except Exception as e:
            print(f"   ‚ùå Falhou: {str(e)[:50]}...")
            continue
    
    if df is None:
        print("‚ùå N√£o foi poss√≠vel carregar o arquivo com nenhuma configura√ß√£o")
        return None, None
    
    # LIMPEZA AVAN√áADA DE COLUNAS
    print(f"\nüßπ Limpando nomes das colunas...")
    print(f"   üìã Colunas originais: {len(df.columns)}")
    
    # Mostrar colunas originais para debug
    print(f"   üîç Colunas brutas encontradas:")
    for i, col in enumerate(df.columns, 1):
        print(f"      {i:2}. '{col}' (len={len(col)})")
    
    # Limpar colunas com t√©cnica avan√ßada
    colunas_limpas = []
    for col in df.columns:
        # Remover espa√ßos extras, quebras de linha, etc.
        col_limpa = re.sub(r'\s+', ' ', str(col).strip())
        colunas_limpas.append(col_limpa)
    
    df.columns = colunas_limpas
    
    print(f"   ‚úÖ Colunas ap√≥s limpeza:")
    for i, col in enumerate(df.columns, 1):
        print(f"      {i:2}. '{col}'")
    
    print(f"\nüìä Dataset carregado:")
    print(f"   üìà Registros: {len(df)}")
    print(f"   üìã Colunas: {len(df.columns)}")
    print(f"   üíæ Mem√≥ria: {df.memory_usage(deep=True).sum() / 1024:.1f} KB")
    
    return df, arquivo

def criar_mapeamento_inteligente(df):
    """Cria mapeamento inteligente com foco especial no campo envio_final"""
    
    colunas_disponiveis = df.columns.tolist()
    
    print(f"\nüß† MAPEAMENTO INTELIGENTE - {len(colunas_disponiveis)} colunas")
    print("=" * 70)
    
    # MAPEAMENTO BASE EXPANDIDO com mais varia√ß√µes
    mapeamento_base = {
        'numero_cte': ['CTE', 'Numero CTE', 'N√∫mero CTE', 'NumCTE', 'N CTE', 'N¬∫ CTE'],
        'destinatario_nome': [
            'Remetente - Nome', 'Destinatario', 'Cliente', 'Remetente',
            'Destinat√°rio - Nome', 'Nome Destinatario', 'Nome Cliente',
            'Destinat√°rio', 'Remetente Nome'
        ],
        'veiculo_placa': [
            'Ve√≠culo - Placa', 'Veiculo', 'Placa', 'Veiculo - Placa',
            'Placa Veiculo', 'Placa do Veiculo', 'Ve√≠culo Placa'
        ],
        'valor_total': [
            'Total', 'Valor', 'Valor Total', 'Valor do CTE', 'Vlr Total',
            ' Total ', 'Total ', ' Total'  # Varia√ß√µes com espa√ßos
        ],
        'data_emissao': [
            'Data emiss√£o Cte', 'Data Emissao', 'Emissao', 'Data CTE',
            'Data de emiss√£o', 'Dt Emissao', 'Data emissao Cte'
        ],
        'data_rq_tmc': [
            'Data RQ/TMC', 'RQ/TMC', 'Data RQ', 'Data TMC',
            'RQ TMC', 'Data RQ-TMC', 'Data RQ TMC'
        ],
        'data_envio_processo': [
            'Data Envio do processo Faturamento', 'Envio Processo',
            'Data Envio Processo', 'Envio do Processo', 'Data Envio Faturamento'
        ],
        'data_inclusao_fatura': [
            'Data INCLUS√ÉO Fatura Bsoft', 'Inclus√£o Fatura', 'Inclusao Fatura',
            'Data Inclusao', 'Dt Inclusao Fatura', 'Data INCLUSAO Fatura Bsoft'
        ],
        'primeiro_envio': [
            '1¬∞ Envio', '1¬∫ Envio', 'Primeiro Envio', '1 Envio',
            'Primeiro envio', '1¬∞ envio', '1¬∫ envio', '1 envio'
        ],
        'data_atesto': [
            'Data do atesto', 'Atesto', 'Data Atesto', 'Dt Atesto',
            'Data de Atesto', 'Data do Atesto', 'Data atesto'
        ],
        # ‚≠ê FOCO ESPECIAL NO ENVIO_FINAL - TODAS AS VARIA√á√ïES POSS√çVEIS
        'envio_final': [
            'Envio final', 'Envio Final', 'Final', 'Envio final CTE',
            'Data Envio Final', 'Dt Envio Final', 'Envio Final',
            'envio final', 'ENVIO FINAL', 'Envio_Final', 'EnvioFinal',
            ' Envio final', 'Envio final ', ' Envio final ',  # Com espa√ßos
            'Envio\nfinal', 'Envio\r\nfinal',  # Com quebras de linha
        ],
        'numero_fatura': [
            'Faturas', 'Fatura', 'Numero Fatura', 'N¬∫ Fatura',
            'N Fatura', 'Num Fatura', 'N√∫mero Fatura'
        ],
        'observacao': [
            'OBSERVA√á√ÉO', 'Observacao', 'Obs', 'Observacoes',
            'Observa√ß√µes', 'Comentario', 'Coment√°rio', 'OBSERVACAO'
        ]
    }
    
    # ALGORITMO DE MAPEAMENTO INTELIGENTE
    mapeamento_final = {}
    colunas_nao_mapeadas = []
    
    print(f"üîç Iniciando mapeamento inteligente...")
    
    for campo, possiveis_nomes in mapeamento_base.items():
        encontrado = False
        campo_encontrado = None
        
        # Busca exata primeiro
        for nome_possivel in possiveis_nomes:
            if nome_possivel in colunas_disponiveis:
                mapeamento_final[campo] = nome_possivel
                campo_encontrado = nome_possivel
                encontrado = True
                print(f"   ‚úÖ {campo:20} -> '{nome_possivel}' (busca exata)")
                break
        
        # Se n√£o encontrou, busca aproximada (ignorando espa√ßos e case)
        if not encontrado:
            for coluna_real in colunas_disponiveis:
                coluna_normalizada = re.sub(r'\s+', ' ', coluna_real.lower().strip())
                
                for nome_possivel in possiveis_nomes:
                    nome_normalizado = re.sub(r'\s+', ' ', nome_possivel.lower().strip())
                    
                    # Compara√ß√£o flex√≠vel
                    if (coluna_normalizada == nome_normalizado or
                        nome_normalizado in coluna_normalizada or
                        coluna_normalizada in nome_normalizado):
                        
                        mapeamento_final[campo] = coluna_real
                        campo_encontrado = coluna_real
                        encontrado = True
                        print(f"   ‚úÖ {campo:20} -> '{coluna_real}' (busca aproximada)")
                        break
                
                if encontrado:
                    break
        
        # Se ainda n√£o encontrou
        if not encontrado:
            mapeamento_final[campo] = None
            colunas_nao_mapeadas.append(campo)
            print(f"   ‚ùå {campo:20} -> N√ÉO ENCONTRADO")
            
            # Debug especial para envio_final
            if campo == 'envio_final':
                print(f"      üö® PROBLEMA CR√çTICO: Campo 'envio_final' n√£o mapeado!")
                print(f"      üîç Procurei por: {possiveis_nomes}")
                print(f"      üìã Colunas dispon√≠veis que cont√™m 'envio' ou 'final':")
                for col in colunas_disponiveis:
                    if 'envio' in col.lower() or 'final' in col.lower():
                        print(f"         üìå '{col}'")
    
    # VERIFICA√á√ÉO ESPECIAL PARA ENVIO_FINAL
    if not mapeamento_final.get('envio_final'):
        print(f"\nüö® BUSCA EMERGENCIAL PARA ENVIO_FINAL:")
        
        # Busca mais agressiva
        candidatos_envio_final = []
        for col in colunas_disponiveis:
            col_lower = col.lower()
            if ('envio' in col_lower and 'final' in col_lower) or 'final' in col_lower:
                candidatos_envio_final.append(col)
        
        if candidatos_envio_final:
            print(f"   üéØ Candidatos encontrados:")
            for i, candidato in enumerate(candidatos_envio_final, 1):
                print(f"      {i}. '{candidato}'")
            
            # Usar o primeiro candidato automaticamente
            mapeamento_final['envio_final'] = candidatos_envio_final[0]
            print(f"   ‚úÖ Usando automaticamente: '{candidatos_envio_final[0]}'")
        else:
            print(f"   ‚ùå Nenhum candidato encontrado para envio_final")
    
    print(f"\nüìä RESULTADO DO MAPEAMENTO:")
    print(f"   ‚úÖ Campos mapeados: {len([v for v in mapeamento_final.values() if v])}")
    print(f"   ‚ùå Campos n√£o mapeados: {len(colunas_nao_mapeadas)}")
    
    if colunas_nao_mapeadas:
        print(f"   ‚ö†Ô∏è N√£o mapeados: {', '.join(colunas_nao_mapeadas)}")
    
    # SALVAR MAPEAMENTO PARA DEBUG
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    arquivo_debug = f'mapeamento_debug_{timestamp}.json'
    
    debug_info = {
        'timestamp': timestamp,
        'arquivo_csv': 'N/A',
        'mapeamento_final': mapeamento_final,
        'colunas_disponiveis': colunas_disponiveis,
        'colunas_nao_mapeadas': colunas_nao_mapeadas
    }
    
    try:
        with open(arquivo_debug, 'w', encoding='utf-8') as f:
            json.dump(debug_info, f, indent=2, default=str)
        print(f"   üíæ Debug salvo em: {arquivo_debug}")
    except:
        pass
    
    return mapeamento_final

def processar_valor_monetario_avancado(valor):
    """Processamento avan√ßado de valores monet√°rios brasileiros"""
    if pd.isna(valor) or valor == '' or valor is None:
        return 0.0
    
    try:
        valor_str = str(valor).strip()
        
        if not valor_str or valor_str.lower() in ['nan', 'nat', '', 'none', 'null']:
            return 0.0
        
        # Remover s√≠mbolos monet√°rios, espa√ßos e outros caracteres
        valor_str = re.sub(r'[R$\s‚Ç¨\$¬£¬•]', '', valor_str)
        valor_str = re.sub(r'[^\d,.-]', '', valor_str)
        
        if not valor_str:
            return 0.0
        
        # Processar diferentes formatos brasileiros
        if ',' in valor_str and '.' in valor_str:
            # Formato: 1.234.567,89 ou 1,234,567.89
            if valor_str.rfind(',') > valor_str.rfind('.'):
                # Formato brasileiro: 1.234.567,89
                valor_str = valor_str.replace('.', '').replace(',', '.')
            else:
                # Formato americano: 1,234,567.89
                valor_str = valor_str.replace(',', '')
        
        elif ',' in valor_str:
            # Pode ser formato brasileiro (1234,89) ou americano (1,234)
            partes = valor_str.split(',')
            if len(partes) == 2 and len(partes[1]) <= 2:
                # Formato brasileiro: 1234,89
                valor_str = valor_str.replace(',', '.')
            else:
                # Formato americano: 1,234 ou 1,234,567
                valor_str = valor_str.replace(',', '')
        
        return float(valor_str)
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erro ao processar valor '{valor}': {e}")
        return 0.0

def processar_data_brasileira_avancada(data_str, debug_campo=None):
    """Processamento avan√ßado de datas brasileiras com debugging detalhado"""
    if pd.isna(data_str) or data_str == '' or data_str is None:
        return None
    
    try:
        data_str = str(data_str).strip()
        
        if not data_str or data_str.lower() in ['nan', 'nat', '', 'none', 'null']:
            return None
        
        # Remover caracteres especiais comuns
        data_str = re.sub(r'[^\w/\-.:, ]', '', data_str)
        data_str = data_str.strip()
        
        if not data_str:
            return None
        
        # FORMATOS DE DATA EXPANDIDOS (ordem de prioridade)
        formatos = [
            # Formatos brasileiros com m√™s abreviado
            '%d/%b/%y',      # 25/jul/24
            '%d/%b/%Y',      # 25/jul/2024
            '%d %b %y',      # 25 jul 24
            '%d %b %Y',      # 25 jul 2024
            '%d-%b-%y',      # 25-jul-24
            '%d-%b-%Y',      # 25-jul-2024
            '%d.%b.%y',      # 25.jul.24
            '%d.%b.%Y',      # 25.jul.2024
            
            # Formatos num√©ricos
            '%d/%m/%Y',      # 25/07/2024
            '%d-%m-%Y',      # 25-07-2024
            '%Y-%m-%d',      # 2024-07-25 (ISO)
            '%d/%m/%y',      # 25/07/24
            '%d-%m-%y',      # 25-07-24
            '%d.%m.%Y',      # 25.07.2024
            '%d.%m.%y',      # 25.07.24
            '%d %m %Y',      # 25 07 2024
            '%d %m %y',      # 25 07 24
            
            # Formatos americanos
            '%m/%d/%Y',      # 07/25/2024
            '%m-%d-%Y',      # 07-25-2024
            '%m/%d/%y',      # 07/25/24
            '%m-%d-%y',      # 07-25-24
            
            # Formatos longos
            '%d de %B de %Y', # 25 de julho de 2024
        ]
        
        # Tentar cada formato
        for formato in formatos:
            try:
                data_processada = datetime.strptime(data_str, formato).date()
                
                # Valida√ß√£o b√°sica da data
                if data_processada.year < 2020 or data_processada.year > 2030:
                    continue
                
                if debug_campo:
                    print(f"      üóìÔ∏è {debug_campo}: '{data_str}' -> {data_processada} ‚úÖ")
                
                return data_processada
                
            except ValueError:
                continue
        
        # Se n√£o conseguiu processar com formatos padr√£o, tentar limpeza mais agressiva
        # Normalizar meses brasileiros
        meses_br = {
            'jan': 'Jan', 'fev': 'Feb', 'mar': 'Mar', 'abr': 'Apr',
            'mai': 'May', 'jun': 'Jun', 'jul': 'Jul', 'ago': 'Aug',
            'set': 'Sep', 'out': 'Oct', 'nov': 'Nov', 'dez': 'Dec'
        }
        
        data_normalizada = data_str.lower()
        for br_mes, en_mes in meses_br.items():
            if br_mes in data_normalizada:
                data_normalizada = data_normalizada.replace(br_mes, en_mes)
                break
        
        # Tentar novamente com data normalizada
        for formato in formatos[:8]:  # S√≥ os formatos com m√™s abreviado
            try:
                data_processada = datetime.strptime(data_normalizada, formato).date()
                
                if data_processada.year < 2020 or data_processada.year > 2030:
                    continue
                
                if debug_campo:
                    print(f"      üóìÔ∏è {debug_campo}: '{data_str}' -> {data_processada} ‚úÖ (normalizada)")
                
                return data_processada
                
            except ValueError:
                continue
        
        # Se chegou aqui, n√£o conseguiu processar
        if debug_campo:
            print(f"      ‚ùå {debug_campo}: Falha ao processar '{data_str}'")
        
        return None
        
    except Exception as e:
        if debug_campo:
            print(f"      ‚ùå {debug_campo}: Erro '{data_str}': {e}")
        return None

def mapear_dados_para_banco_avancado(df, mapeamento):
    """Mapeamento avan√ßado com foco especial no envio_final e debugging detalhado"""
    
    if not mapeamento.get('numero_cte'):
        print("‚ùå ERRO CR√çTICO: Coluna CTE n√£o identificada no mapeamento!")
        return []
    
    print(f"\nüîÑ MAPEAMENTO AVAN√áADO - {len(df)} registros")
    print("=" * 70)
    
    # VERIFICA√á√ÉO PR√âVIA DA COLUNA ENVIO_FINAL
    coluna_envio_final = mapeamento.get('envio_final')
    if coluna_envio_final:
        print(f"üéØ VERIFICA√á√ÉO PR√âVIA - Campo envio_final mapeado para: '{coluna_envio_final}'")
        
        # Estat√≠sticas da coluna envio_final no CSV
        if coluna_envio_final in df.columns:
            valores_envio_final = df[coluna_envio_final]
            total_valores = len(valores_envio_final)
            valores_nao_nulos = valores_envio_final.notna().sum()
            valores_nao_vazios = (valores_envio_final != '').sum()
            
            print(f"   üìä Total de registros: {total_valores}")
            print(f"   ‚úÖ Valores n√£o nulos: {valores_nao_nulos}")
            print(f"   ‚úÖ Valores n√£o vazios: {valores_nao_vazios}")
            
            # Mostrar alguns exemplos
            exemplos = valores_envio_final.dropna().head(10)
            if len(exemplos) > 0:
                print(f"   üîç Exemplos de valores encontrados:")
                for i, valor in enumerate(exemplos, 1):
                    print(f"      {i}. '{valor}'")
            else:
                print(f"   ‚ùå PROBLEMA: Nenhum valor v√°lido encontrado na coluna!")
        else:
            print(f"   ‚ùå ERRO: Coluna '{coluna_envio_final}' n√£o existe no DataFrame!")
    else:
        print(f"‚ùå PROBLEMA CR√çTICO: Campo envio_final n√£o foi mapeado!")
    
    print(f"\nüîÑ Iniciando processamento dos registros...")
    
    registros = []
    erros_cte = 0
    debug_count = 0
    registros_envio_final_encontrados = 0
    
    for index, row in df.iterrows():
        try:
            # Extrair n√∫mero CTE com processamento avan√ßado
            numero_cte_raw = row[mapeamento['numero_cte']]
            
            if pd.isna(numero_cte_raw):
                erros_cte += 1
                continue
            
            # Converter para int com limpeza
            try:
                if isinstance(numero_cte_raw, str):
                    numero_cte_str = re.sub(r'[^\d]', '', numero_cte_raw)
                    if not numero_cte_str:
                        erros_cte += 1
                        continue
                    numero_cte = int(numero_cte_str)
                else:
                    numero_cte = int(float(numero_cte_raw))
                
                if numero_cte <= 0:
                    erros_cte += 1
                    continue
                    
            except:
                erros_cte += 1
                continue
            
            # Criar registro base
            registro = {
                'numero_cte': numero_cte,
                'destinatario_nome': None,
                'veiculo_placa': None,
                'valor_total': 0.0,
                'data_emissao': None,
                'numero_fatura': None,
                'data_baixa': None,
                'observacao': None,
                'data_inclusao_fatura': None,
                'data_envio_processo': None,
                'primeiro_envio': None,
                'data_rq_tmc': None,
                'data_atesto': None,
                'envio_final': None,
                'origem_dados': 'CSV_CORRIGIDO_V3'
            }
            
            # Debug detalhado para os primeiros registros E para o CTE 306 espec√≠fico
            mostrar_debug = debug_count < 5 or numero_cte == 306
            if mostrar_debug:
                print(f"\n   üîç DEBUG CTE {numero_cte}:")
            
            # Mapear todos os campos dispon√≠veis
            for campo, coluna in mapeamento.items():
                if not coluna or coluna not in df.columns:
                    continue
                
                valor = row[coluna]
                
                if campo == 'destinatario_nome':
                    if pd.notna(valor) and str(valor).strip() != '':
                        registro['destinatario_nome'] = str(valor).strip()
                        if mostrar_debug:
                            print(f"      üë§ Destinat√°rio: '{registro['destinatario_nome']}'")
                
                elif campo == 'veiculo_placa':
                    if pd.notna(valor) and str(valor).strip() != '':
                        registro['veiculo_placa'] = str(valor).strip()
                        if mostrar_debug:
                            print(f"      üöõ Ve√≠culo: '{registro['veiculo_placa']}'")
                
                elif campo == 'valor_total':
                    registro['valor_total'] = processar_valor_monetario_avancado(valor)
                    if mostrar_debug:
                        print(f"      üí∞ Valor: R$ {registro['valor_total']:.2f} (original: '{valor}')")
                
                elif campo == 'numero_fatura':
                    if pd.notna(valor) and str(valor).strip() != '':
                        registro['numero_fatura'] = str(valor).strip()
                        if mostrar_debug:
                            print(f"      üìÑ Fatura: '{registro['numero_fatura']}'")
                
                elif campo == 'observacao':
                    if pd.notna(valor) and str(valor).strip() != '':
                        registro['observacao'] = str(valor).strip()[:500]  # Limitar tamanho
                
                # PROCESSAMENTO ESPECIAL PARA ENVIO_FINAL
                elif campo == 'envio_final':
                    debug_campo = 'ENVIO_FINAL' if mostrar_debug else None
                    data_processada = processar_data_brasileira_avancada(valor, debug_campo)
                    registro['envio_final'] = data_processada
                    
                    if data_processada:
                        registros_envio_final_encontrados += 1
                        if mostrar_debug:
                            print(f"      üéØ ENVIO_FINAL: '{valor}' -> {data_processada} ‚úÖ‚úÖ‚úÖ")
                    elif mostrar_debug:
                        print(f"      ‚ö†Ô∏è ENVIO_FINAL: '{valor}' -> FALHA NO PROCESSAMENTO")
                
                # Processar outras datas
                elif campo in ['data_emissao', 'data_rq_tmc', 'data_envio_processo', 
                             'data_inclusao_fatura', 'primeiro_envio', 'data_atesto', 'data_baixa']:
                    
                    debug_campo = campo if mostrar_debug else None
                    data_processada = processar_data_brasileira_avancada(valor, debug_campo)
                    registro[campo] = data_processada
            
            registros.append(registro)
            
            if mostrar_debug:
                debug_count += 1
            
            # Progresso
            if (index + 1) % 50 == 0:
                print(f"   üìä Processados: {index + 1}/{len(df)} (envio_final: {registros_envio_final_encontrados})")
        
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na linha {index+1} (CTE {numero_cte_raw}): {e}")
            continue
    
    print(f"\n‚úÖ RESULTADO DO MAPEAMENTO:")
    print(f"   üìà {len(registros)} registros v√°lidos mapeados")
    print(f"   üéØ {registros_envio_final_encontrados} registros COM envio_final ‚≠ê")
    print(f"   ‚ùå {erros_cte} registros ignorados por CTE inv√°lido")
    
    # Estat√≠sticas detalhadas
    estatisticas = {
        'com_destinatario': sum(1 for r in registros if r['destinatario_nome']),
        'com_veiculo': sum(1 for r in registros if r['veiculo_placa']),
        'com_emissao': sum(1 for r in registros if r['data_emissao']),
        'com_primeiro_envio': sum(1 for r in registros if r['primeiro_envio']),
        'com_atesto': sum(1 for r in registros if r['data_atesto']),
        'com_envio_final': sum(1 for r in registros if r['envio_final']),  # ‚≠ê CR√çTICO
        'com_fatura': sum(1 for r in registros if r['numero_fatura']),
        'com_rq_tmc': sum(1 for r in registros if r['data_rq_tmc'])
    }
    
    print(f"\nüìä ESTAT√çSTICAS DETALHADAS:")
    for campo, quantidade in estatisticas.items():
        porcentagem = (quantidade / len(registros)) * 100 if len(registros) > 0 else 0
        emoji = "üéØ" if campo == 'com_envio_final' else "‚úÖ"
        print(f"   {emoji} {campo:20}: {quantidade:4}/{len(registros)} ({porcentagem:5.1f}%)")
    
    # VERIFICA√á√ÉO FINAL ESPEC√çFICA PARA ENVIO_FINAL
    print(f"\nüéØ VERIFICA√á√ÉO FINAL - ENVIO_FINAL:")
    registros_com_envio_final = [r for r in registros if r['envio_final']]
    
    if registros_com_envio_final:
        print(f"   ‚úÖ {len(registros_com_envio_final)} registros processados com envio_final")
        print(f"   üîç Primeiros 10 exemplos:")
        for i, r in enumerate(registros_com_envio_final[:10], 1):
            print(f"      {i:2}. CTE {r['numero_cte']:6}: {r['envio_final']}")
        
        # VERIFICA√á√ÉO ESPEC√çFICA DO CTE 306
        cte_306 = next((r for r in registros if r['numero_cte'] == 306), None)
        if cte_306:
            print(f"\n   üéØ VERIFICA√á√ÉO CTE 306:")
            print(f"      ‚úÖ CTE 306 encontrado nos registros")
            print(f"      üóìÔ∏è Envio Final: {cte_306['envio_final']}")
            if cte_306['envio_final']:
                print(f"      üéâ SUCESSO! CTE 306 tem envio_final: {cte_306['envio_final']}")
            else:
                print(f"      ‚ùå PROBLEMA: CTE 306 n√£o tem envio_final processado")
        else:
            print(f"\n   ‚ö†Ô∏è CTE 306 n√£o foi encontrado nos registros processados")
    else:
        print(f"   ‚ùå PROBLEMA CR√çTICO: Nenhum registro com envio_final foi processado!")
        print(f"   üîç Poss√≠veis causas:")
        print(f"      1. Coluna '{coluna_envio_final}' n√£o cont√©m datas v√°lidas")
        print(f"      2. Formato das datas n√£o √© reconhecido")
        print(f"      3. Valores est√£o em branco ou com caracteres especiais")
    
    return registros

def inserir_registros_banco_avancado(conn, registros):
    """Inser√ß√£o avan√ßada com verifica√ß√£o detalhada do envio_final"""
    try:
        cursor = conn.cursor()
        
        # Query de inser√ß√£o
        insert_query = """
        INSERT INTO dashboard_baker (
            numero_cte, destinatario_nome, veiculo_placa, valor_total,
            data_emissao, numero_fatura, data_baixa, observacao,
            data_inclusao_fatura, data_envio_processo, primeiro_envio,
            data_rq_tmc, data_atesto, envio_final, origem_dados
        ) VALUES (
            %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
        )
        """
        
        inseridos = 0
        erros = 0
        registros_envio_final = 0
        cte_306_inserido = False
        
        print(f"\nüíæ INSER√á√ÉO AVAN√áADA NO BANCO:")
        print("=" * 50)
        
        for i, registro in enumerate(registros, 1):
            try:
                # Preparar par√¢metros
                parametros = (
                    registro['numero_cte'],
                    registro['destinatario_nome'],
                    registro['veiculo_placa'],
                    registro['valor_total'],
                    registro['data_emissao'],
                    registro['numero_fatura'],
                    registro['data_baixa'],
                    registro['observacao'],
                    registro['data_inclusao_fatura'],
                    registro['data_envio_processo'],
                    registro['primeiro_envio'],
                    registro['data_rq_tmc'],
                    registro['data_atesto'],
                    registro['envio_final'],  # ‚≠ê CAMPO CR√çTICO
                    registro['origem_dados']
                )
                
                # Executar inser√ß√£o
                cursor.execute(insert_query, parametros)
                inseridos += 1
                
                # Contar registros com envio_final
                if registro['envio_final']:
                    registros_envio_final += 1
                
                # Verificar especificamente o CTE 306
                if registro['numero_cte'] == 306:
                    cte_306_inserido = True
                    print(f"   üéØ CTE 306 INSERIDO:")
                    print(f"      üìÖ Envio Final: {registro['envio_final']}")
                    if registro['envio_final']:
                        print(f"      ‚úÖ COM ENVIO_FINAL! Problema resolvido!")
                    else:
                        print(f"      ‚ùå SEM ENVIO_FINAL - problema persiste")
                
                # Debug dos primeiros registros com envio_final
                if registro['envio_final'] and registros_envio_final <= 5:
                    print(f"   üéØ CTE {registro['numero_cte']}: Envio Final = {registro['envio_final']} ‚úÖ")
                
                # Mostrar progresso
                if i % 100 == 0:
                    print(f"   üìä {i}/{len(registros)} (envio_final: {registros_envio_final})")
                
                # Commit a cada 100 registros
                if i % 100 == 0:
                    conn.commit()
            
            except Exception as e:
                erros += 1
                print(f"‚ùå Erro CTE {registro.get('numero_cte', 'N/A')}: {e}")
                continue
        
        # Commit final
        conn.commit()
        cursor.close()
        
        print(f"\nüìä RESULTADO DA INSER√á√ÉO:")
        print(f"   ‚úÖ {inseridos} registros inseridos com sucesso")
        print(f"   üéØ {registros_envio_final} registros COM envio_final ‚≠ê")
        print(f"   ‚ùå {erros} erros durante a inser√ß√£o")
        
        if not cte_306_inserido:
            print(f"   ‚ö†Ô∏è CTE 306 n√£o foi inserido (pode n√£o estar no CSV)")
        
        if len(registros) > 0:
            taxa_sucesso = (inseridos / len(registros)) * 100
            taxa_envio_final = (registros_envio_final / inseridos) * 100 if inseridos > 0 else 0
            print(f"   üìà Taxa de sucesso: {taxa_sucesso:.1f}%")
            print(f"   üéØ Taxa envio_final: {taxa_envio_final:.1f}%")
        
        return inseridos > 0, registros_envio_final
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico na inser√ß√£o: {e}")
        conn.rollback()
        return False, 0

def verificar_resultado_final_detalhado(conn):
    """Verifica√ß√£o final detalhada com foco no envio_final"""
    try:
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        print(f"\nüéØ VERIFICA√á√ÉO FINAL DETALHADA:")
        print("=" * 60)
        
        # Estat√≠sticas gerais
        cursor.execute("SELECT COUNT(*) FROM dashboard_baker")
        total = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM dashboard_baker WHERE envio_final IS NOT NULL")
        com_envio_final = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM dashboard_baker WHERE data_emissao IS NOT NULL")
        com_emissao = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM dashboard_baker WHERE primeiro_envio IS NOT NULL")
        com_primeiro_envio = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM dashboard_baker WHERE data_atesto IS NOT NULL")
        com_atesto = cursor.fetchone()[0]
        
        print(f"üìä ESTAT√çSTICAS GERAIS:")
        print(f"   üìà Total de registros: {total}")
        print(f"   üìÖ Com data emiss√£o: {com_emissao} ({com_emissao/total*100:.1f}%)")
        print(f"   üì§ Com 1¬∫ envio: {com_primeiro_envio} ({com_primeiro_envio/total*100:.1f}%)")
        print(f"   ‚úÖ Com atesto: {com_atesto} ({com_atesto/total*100:.1f}%)")
        print(f"   üéØ Com envio final: {com_envio_final} ({com_envio_final/total*100:.1f}%) ‚≠ê")
        
        # Verificar especificamente registros com envio_final
        if com_envio_final > 0:
            print(f"\nüéØ AN√ÅLISE DOS REGISTROS COM ENVIO_FINAL:")
            
            cursor.execute("""
                SELECT numero_cte, destinatario_nome, envio_final,
                       data_emissao, data_atesto, primeiro_envio
                FROM dashboard_baker 
                WHERE envio_final IS NOT NULL 
                ORDER BY numero_cte 
                LIMIT 15
            """)
            
            exemplos = cursor.fetchall()
            print(f"   üìã Primeiros {len(exemplos)} registros com envio_final:")
            print(f"       {'CTE':>6} {'Envio Final':>12} {'Cliente':>20}")
            print(f"       {'-'*6} {'-'*12} {'-'*20}")
            
            for ex in exemplos:
                cliente = (ex['destinatario_nome'] or 'N/A')[:18]
                print(f"       {ex['numero_cte']:>6} {ex['envio_final']} {cliente:>20}")
            
            # VERIFICA√á√ÉO ESPEC√çFICA DO CTE 306
            print(f"\nüîç VERIFICA√á√ÉO ESPEC√çFICA - CTE 306:")
            cursor.execute("""
                SELECT numero_cte, destinatario_nome, envio_final, 
                       data_emissao, primeiro_envio, data_atesto,
                       created_at, origem_dados
                FROM dashboard_baker 
                WHERE numero_cte = 306
            """)
            
            cte_306 = cursor.fetchone()
            if cte_306:
                print(f"   ‚úÖ CTE 306 encontrado no banco!")
                print(f"   üìä Dados do CTE 306:")
                print(f"      üî¢ N√∫mero: {cte_306['numero_cte']}")
                print(f"      üë§ Cliente: {cte_306['destinatario_nome'] or 'N/A'}")
                print(f"      üìÖ Data Emiss√£o: {cte_306['data_emissao'] or 'N/A'}")
                print(f"      üì§ 1¬∫ Envio: {cte_306['primeiro_envio'] or 'N/A'}")
                print(f"      ‚úÖ Atesto: {cte_306['data_atesto'] or 'N/A'}")
                print(f"      üéØ Envio Final: {cte_306['envio_final'] or 'N/A'}")
                print(f"      üìù Origem: {cte_306['origem_dados'] or 'N/A'}")
                print(f"      üïê Inserido: {cte_306['created_at']}")
                
                if cte_306['envio_final']:
                    print(f"   üéâ SUCESSO TOTAL! CTE 306 foi importado COM envio_final!")
                    print(f"   ‚úÖ Problema do usu√°rio foi RESOLVIDO!")
                else:
                    print(f"   ‚ùå PROBLEMA AINDA EXISTE: CTE 306 sem envio_final no banco")
            else:
                print(f"   ‚ùå CTE 306 N√ÉO ENCONTRADO no banco")
                print(f"   üí° Poss√≠vel causa: CTE 306 n√£o existe no CSV ou foi filtrado")
                
                # Verificar CTEs pr√≥ximos
                cursor.execute("""
                    SELECT numero_cte, envio_final 
                    FROM dashboard_baker 
                    WHERE numero_cte BETWEEN 300 AND 310
                    ORDER BY numero_cte
                """)
                proximos = cursor.fetchall()
                if proximos:
                    print(f"   üîç CTEs pr√≥ximos encontrados:")
                    for p in proximos:
                        status = "‚úÖ" if p['envio_final'] else "‚ùå"
                        print(f"      {status} CTE {p['numero_cte']}: {p['envio_final'] or 'sem envio_final'}")
        
        else:
            print(f"\n‚ùå PROBLEMA CR√çTICO CONFIRMADO:")
            print(f"   üö® Nenhum registro com envio_final foi inserido no banco!")
            print(f"   üîç Poss√≠veis causas:")
            print(f"      1. Mapeamento incorreto da coluna")
            print(f"      2. Formato de data n√£o reconhecido")
            print(f"      3. Dados corrompidos ou em formato inesperado")
            print(f"      4. Erro na l√≥gica de processamento")
        
        # Verificar integridade geral dos dados
        print(f"\nüîç VERIFICA√á√ÉO DE INTEGRIDADE:")
        
        # Registros com diferentes combina√ß√µes de campos
        cursor.execute("""
            SELECT 
                COUNT(*) as total,
                COUNT(data_emissao) as com_emissao,
                COUNT(primeiro_envio) as com_primeiro_envio,
                COUNT(data_atesto) as com_atesto,
                COUNT(envio_final) as com_envio_final,
                COUNT(numero_fatura) as com_fatura
            FROM dashboard_baker
        """)
        
        integridade = cursor.fetchone()
        print(f"   üìä Campo por campo:")
        print(f"      üìÖ Data Emiss√£o: {integridade['com_emissao']}/{integridade['total']}")
        print(f"      üì§ 1¬∫ Envio: {integridade['com_primeiro_envio']}/{integridade['total']}")
        print(f"      ‚úÖ Atesto: {integridade['com_atesto']}/{integridade['total']}")
        print(f"      üéØ Envio Final: {integridade['com_envio_final']}/{integridade['total']} ‚≠ê")
        print(f"      üìÑ Fatura: {integridade['com_fatura']}/{integridade['total']}")
        
        cursor.close()
        
        return com_envio_final > 0
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o final: {e}")
        return False

def limpar_banco_com_confirmacao(conn):
    """Limpa todos os dados da tabela dashboard_baker com confirma√ß√£o detalhada"""
    try:
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM dashboard_baker")
        total_antes = cursor.fetchone()[0]
        
        print(f"\nüóëÔ∏è LIMPEZA DO BANCO DE DADOS")  
        print("=" * 50)
        print(f"üìä Registros atuais no banco: {total_antes}")
        
        if total_antes == 0:
            print("‚úÖ Banco j√° est√° vazio, prosseguindo...")
            cursor.close()
            return True
        
        # Mostrar resumo dos dados atuais
        cursor.execute("""
            SELECT origem_dados, COUNT(*) as qtd
            FROM dashboard_baker 
            GROUP BY origem_dados
            ORDER BY qtd DESC
        """)
        
        origens = cursor.fetchall()
        if origens:
            print(f"üìã Dados por origem:")
            for origem in origens:
                origem_nome = origem[0] or 'N/A'
                print(f"   üìÅ {origem_nome}: {origem[1]} registros")
        
        print(f"\n‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o ir√°:")
        print(f"   üóëÔ∏è Apagar TODOS os {total_antes} registros")
        print(f"   üîÑ Resetar a sequ√™ncia de IDs")
        print(f"   üßπ Limpar completamente a tabela")
        print(f"\nüíæ DADOS N√ÉO SER√ÉO PERDIDOS se voc√™ tiver:")
        print(f"   üìÑ Arquivo CSV original")
        print(f"   üíæ Backup do banco de dados")
        
        confirmacao = input(f"\nüîÑ CONFIRMA a limpeza completa? Digite 'LIMPAR' para confirmar: ")
        
        if confirmacao != 'LIMPAR':
            print("‚ùå Limpeza cancelada pelo usu√°rio")
            cursor.close()
            return False
        
        print("üóëÔ∏è Executando limpeza completa...")
        cursor.execute("TRUNCATE TABLE dashboard_baker RESTART IDENTITY CASCADE")
        conn.commit()
        
        cursor.execute("SELECT COUNT(*) FROM dashboard_baker")
        total_depois = cursor.fetchone()[0]
        
        cursor.close()
        
        if total_depois == 0:
            print("‚úÖ Tabela limpa com sucesso!")
            print("üéØ Banco pronto para receber novos dados")
            return True
        else:
            print(f"‚ùå Erro: ainda h√° {total_depois} registros")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao limpar banco: {e}")
        return False

def main():
    """Fun√ß√£o principal com processamento avan√ßado"""
    
    print("üöÄ POPULAR BANCO POSTGRESQL - VERS√ÉO 3.0 AVAN√áADA")
    print("=" * 80)
    print("üéØ FOCO CR√çTICO: Resolu√ß√£o completa do problema 'envio_final'")
    print("‚úÖ Mapeamento inteligente com debugging avan√ßado")
    print("‚úÖ Processamento robusto de datas brasileiras")
    print("‚úÖ Verifica√ß√£o detalhada de cada etapa")
    print("=" * 80)
    
    # 1. Conectar ao banco
    print(f"\n[1/8] üîå CONECTANDO AO BANCO...")
    conn = conectar_banco()
    if not conn:
        print("‚ùå Falha na conex√£o. Verifique o PostgreSQL e as credenciais.")
        return
    
    # 2. Limpar banco atual
    print(f"\n[2/8] üóëÔ∏è LIMPANDO BANCO ATUAL...")
    if not limpar_banco_com_confirmacao(conn):
        print("‚ùå Opera√ß√£o cancelada na limpeza do banco")
        conn.close()
        return
    
    # 3. Carregar CSV com detec√ß√£o avan√ßada
    print(f"\n[3/8] üìÇ CARREGANDO CSV COM DETEC√á√ÉO AVAN√áADA...")
    df, arquivo = carregar_csv_com_deteccao_avancada()
    if df is None:
        print("‚ùå Falha no carregamento do CSV")
        conn.close()
        return
    
    # 4. Criar mapeamento inteligente
    print(f"\n[4/8] üß† CRIANDO MAPEAMENTO INTELIGENTE...")
    mapeamento = criar_mapeamento_inteligente(df)
    
    if not mapeamento or not mapeamento.get('numero_cte'):
        print("‚ùå Falha no mapeamento - campo CTE n√£o identificado")
        conn.close()
        return
    
    # Verifica√ß√£o cr√≠tica do envio_final
    if not mapeamento.get('envio_final'):
        print("üö® ALERTA CR√çTICO: Campo 'envio_final' n√£o foi mapeado!")
        print("   Este √© exatamente o problema reportado pelo usu√°rio.")
        
        continuar = input("   Continuar mesmo assim para debug? (s/N): ")
        if continuar.lower() not in ['s', 'sim']:
            conn.close()
            return
    
    # 5. Mapear dados com processamento avan√ßado
    print(f"\n[5/8] üîÑ MAPEANDO DADOS COM PROCESSAMENTO AVAN√áADO...")
    registros = mapear_dados_para_banco_avancado(df, mapeamento)
    
    if not registros:
        print("‚ùå Nenhum registro v√°lido foi processado")
        conn.close()
        return
    
    # 6. Confirma√ß√£o final antes da inser√ß√£o
    print(f"\n[6/8] üéØ CONFIRMA√á√ÉO FINAL...")
    registros_com_envio_final = sum(1 for r in registros if r['envio_final'])
    
    print(f"üìä RESUMO PR√â-INSER√á√ÉO:")
    print(f"   üìà {len(registros)} registros processados")
    print(f"   üéØ {registros_com_envio_final} com envio_final")
    print(f"   üìÅ Arquivo: {arquivo}")
    print(f"   üóÑÔ∏è Destino: {DB_CONFIG['database']}")
    
    if registros_com_envio_final == 0:
        print(f"\n‚ö†Ô∏è ATEN√á√ÉO: Nenhum registro com envio_final ser√° inserido!")
        print(f"   Isso significa que o problema do usu√°rio N√ÉO ser√° resolvido.")
        
        continuar = input(f"   Continuar para an√°lise de debugging? (s/N): ")
        if continuar.lower() not in ['s', 'sim']:
            conn.close()
            return
    
    confirmacao = input(f"\nüîÑ Continuar com a inser√ß√£o? (s/N): ")
    
    if confirmacao.lower() not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        conn.close()
        return
    
    # 7. Inserir dados com verifica√ß√£o avan√ßada
    print(f"\n[7/8] üíæ INSERINDO DADOS COM VERIFICA√á√ÉO AVAN√áADA...")
    sucesso, qtd_envio_final = inserir_registros_banco_avancado(conn, registros)
    
    # 8. Verifica√ß√£o final detalhada
    print(f"\n[8/8] üîç VERIFICA√á√ÉO FINAL DETALHADA...")
    if sucesso:
        tem_envio_final = verificar_resultado_final_detalhado(conn)
        
        print(f"\n" + "=" * 80)
        print(f"üìä RESULTADO FINAL:")
        print(f"   ‚úÖ Inser√ß√£o: {'SUCESSO' if sucesso else 'FALHA'}")
        print(f"   üéØ Registros com envio_final: {qtd_envio_final}")
        print(f"   üìà Taxa de importa√ß√£o: {(qtd_envio_final/len(registros)*100) if registros else 0:.1f}%")
        
        if tem_envio_final and qtd_envio_final > 0:
            print(f"   üéâ PROBLEMA DO USU√ÅRIO: RESOLVIDO! ‚úÖ")
            print(f"   üóÑÔ∏è Campo 'envio_final' est√° sendo importado corretamente")
        else:
            print(f"   ‚ùå PROBLEMA DO USU√ÅRIO: AINDA EXISTE")
            print(f"   üîç Necess√°ria investiga√ß√£o adicional")
        
        print(f"\nüåê PR√ìXIMO PASSO:")
        print(f"   Execute o dashboard: streamlit run dashboard_baker_web_corrigido.py")
        print(f"   Verifique na aba 'CTEs Pendentes' se os dados aparecem corretamente")
        
    else:
        print(f"\n‚ùå FALHA NA INSER√á√ÉO")
        print(f"   Verifique os logs de erro acima")
        print(f"   Poss√≠vel problema de conectividade ou permiss√µes")
    
    conn.close()
    print(f"\n" + "=" * 80)
    print(f"üèÅ PROCESSO CONCLU√çDO")
    
    # Salvar log de execu√ß√£o
    try:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        log_file = f'execucao_importacao_{timestamp}.txt'
        
        with open(log_file, 'w', encoding='utf-8') as f:
            f.write(f"Log de Execu√ß√£o - {timestamp}\n")
            f.write(f"Arquivo CSV: {arquivo}\n")
            f.write(f"Registros processados: {len(registros) if registros else 0}\n")
            f.write(f"Registros com envio_final: {qtd_envio_final}\n")
            f.write(f"Sucesso: {sucesso}\n")
            f.write(f"Mapeamento utilizado:\n")
            for campo, coluna in mapeamento.items():
                f.write(f"  {campo}: {coluna}\n")
        
        print(f"üìù Log salvo em: {log_file}")
        
    except:
        pass

if __name__ == "__main__":
    main()