#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCRIPT MESTRE - Dashboard Baker v3.0
Resolve TODOS os problemas de sincroniza√ß√£o e deploy
"""

import os
import sys
import subprocess
import time
import requests
from datetime import datetime

class MasterFixer:
    def __init__(self):
        self.issues_found = []
        self.fixes_applied = []
        self.github_repo = "barbosageovanni/dashboard-baker"
        self.streamlit_url = "https://dashboard-transpontual.streamlit.app/"
    
    def log(self, message, level="INFO"):
        """Log formatado com timestamp"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        icons = {
            "INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå", "ACTION": "üîß", "CRITICAL": "üö®"
        }
        print(f"[{timestamp}] {icons.get(level, '‚ÑπÔ∏è')} {message}")
    
    def check_environment(self):
        """Detecta se est√° rodando no Codespace ou localmente"""
        self.log("üîç Detectando ambiente...", "ACTION")
        
        is_codespace = os.getenv('CODESPACES') == 'true'
        codespace_name = os.getenv('CODESPACE_NAME', 'N/A')
        
        if is_codespace:
            self.log(f"üåê Executando no GitHub Codespace: {codespace_name}", "INFO")
        else:
            self.log("üíª Executando localmente", "INFO")
            
        return is_codespace
    
    def sync_with_github(self):
        """Sincroniza altera√ß√µes com GitHub"""
        self.log("üîÑ Sincronizando com GitHub...", "ACTION")
        
        try:
            # Pull latest changes
            result = subprocess.run(['git', 'pull', 'origin', 'main'], 
                                   capture_output=True, text=True, check=True)
            self.log("‚úÖ Pull realizado com sucesso", "SUCCESS")
            
            # Check for local changes
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                   capture_output=True, text=True, check=True)
            
            if result.stdout.strip():
                self.log("üìù Altera√ß√µes locais encontradas", "WARNING")
                
                # Add, commit and push
                subprocess.run(['git', 'add', '.'], check=True)
                commit_msg = f"üîÑ Sync autom√°tico {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                subprocess.run(['git', 'commit', '-m', commit_msg], check=True)
                subprocess.run(['git', 'push', 'origin', 'main'], check=True)
                
                self.log("‚úÖ Altera√ß√µes enviadas para GitHub", "SUCCESS")
                self.fixes_applied.append("Git sincronizado")
            else:
                self.log("‚úÖ Nenhuma altera√ß√£o local pendente", "SUCCESS")
                
            return True
            
        except subprocess.CalledProcessError as e:
            self.log(f"‚ùå Erro na sincroniza√ß√£o: {e}", "ERROR")
            self.issues_found.append("Erro de sincroniza√ß√£o Git")
            return False
    
    def verify_files(self):
        """Verifica arquivos essenciais"""
        self.log("üìÅ Verificando arquivos essenciais...", "ACTION")
        
        essential_files = {
            'dashboard_baker_web_corrigido.py': 'Arquivo principal do dashboard',
            'requirements.txt': 'Depend√™ncias Python',
            'system_check.py': 'Script de verifica√ß√£o'
        }
        
        all_files_ok = True
        
        for filename, description in essential_files.items():
            if os.path.exists(filename):
                size = os.path.getsize(filename) / 1024
                self.log(f"‚úÖ {filename}: {size:.1f} KB", "SUCCESS")
            else:
                self.log(f"‚ùå {filename}: AUSENTE ({description})", "ERROR")
                self.issues_found.append(f"Arquivo {filename} ausente")
                all_files_ok = False
        
        return all_files_ok
    
    def test_supabase_connection(self):
        """Testa conex√£o Supabase com configura√ß√µes locais"""
        self.log("üêò Testando configura√ß√£o Supabase...", "ACTION")
        
        # Verificar se .env existe
        if not os.path.exists('.env'):
            self.log("‚ö†Ô∏è Arquivo .env n√£o encontrado - criando template", "WARNING")
            self.create_env_template()
            self.issues_found.append("Arquivo .env ausente")
            return False
        
        # Carregar .env
        self.load_env_file()
        
        # Verificar configura√ß√µes obrigat√≥rias
        required_vars = ['PGHOST', 'PGPASSWORD']
        missing_vars = []
        
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            self.log(f"‚ùå Vari√°veis ausentes no .env: {', '.join(missing_vars)}", "ERROR")
            self.issues_found.append("Configura√ß√µes Supabase incompletas")
            return False
        
        try:
            import psycopg2
            
            config = {
                'host': os.getenv('PGHOST'),
                'database': os.getenv('PGDATABASE', 'postgres'),
                'user': os.getenv('PGUSER', 'postgres'),
                'password': os.getenv('PGPASSWORD'),
                'port': int(os.getenv('PGPORT', '5432')),
                'sslmode': 'require',
                'connect_timeout': 10
            }
            
            conn = psycopg2.connect(**config)
            cursor = conn.cursor()
            cursor.execute("SELECT 1")
            cursor.fetchone()
            cursor.close()
            conn.close()
            
            self.log("‚úÖ Conex√£o Supabase OK", "SUCCESS")
            return True
            
        except Exception as e:
            self.log(f"‚ùå Erro Supabase: {str(e)[:50]}...", "ERROR")
            self.issues_found.append("Problemas de conex√£o Supabase")
            return False
    
    def check_streamlit_app(self):
        """Verifica status da app no Streamlit Cloud"""
        self.log("üåê Verificando Streamlit Cloud...", "ACTION")
        
        try:
            response = requests.get(self.streamlit_url, timeout=30)
            
            if response.status_code == 200:
                self.log("‚úÖ App Streamlit respondendo", "SUCCESS")
                
                # Verificar se o conte√∫do est√° atualizado
                content = response.text
                if "Dashboard Financeiro Baker" in content:
                    self.log("‚úÖ Conte√∫do do dashboard detectado", "SUCCESS")
                    return True
                else:
                    self.log("‚ö†Ô∏è Conte√∫do pode estar desatualizado", "WARNING")
                    self.issues_found.append("App Streamlit com conte√∫do desatualizado")
                    return False
            else:
                self.log(f"‚ùå App retornou HTTP {response.status_code}", "ERROR")
                self.issues_found.append("App Streamlit n√£o est√° respondendo")
                return False
                
        except requests.RequestException as e:
            self.log(f"‚ùå Erro ao acessar app: {str(e)[:50]}...", "ERROR")
            self.issues_found.append("N√£o foi poss√≠vel acessar app Streamlit")
            return False
    
    def create_env_template(self):
        """Cria template .env"""
        template = """# Dashboard Baker - Configura√ß√£o Supabase
PGHOST=db.xxxxx.supabase.co
PGDATABASE=postgres
PGUSER=postgres
PGPASSWORD=sua-senha-supabase
PGPORT=5432

SUPABASE_HOST=db.xxxxx.supabase.co
SUPABASE_DB=postgres
SUPABASE_USER=postgres
SUPABASE_PASSWORD=sua-senha-supabase
SUPABASE_PORT=5432
"""
        
        try:
            with open('.env', 'w', encoding='utf-8') as f:
                f.write(template)
            self.log("‚úÖ Template .env criado", "SUCCESS")
            self.fixes_applied.append("Template .env criado")
        except Exception as e:
            self.log(f"‚ùå Erro ao criar .env: {e}", "ERROR")
    
    def load_env_file(self):
        """Carrega arquivo .env"""
        if os.path.exists('.env'):
            with open('.env', 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        os.environ[key.strip()] = value.strip()
    
    def generate_instructions(self):
        """Gera instru√ß√µes finais"""
        instructions = f"""
üéØ PR√ìXIMOS PASSOS MANUAIS - STREAMLIT CLOUD:

1. üåê Acesse: https://share.streamlit.io/
2. üîç Encontre sua app: dashboard-transpontual
3. ‚öôÔ∏è V√° em Settings

4. üîß Verificar configura√ß√µes:
   Repository: {self.github_repo}
   Branch: main
   Main file: dashboard_baker_web_corrigido.py

5. üîë Na se√ß√£o Secrets, adicionar:
   PGHOST = "db.sua-url-supabase.supabase.co"
   PGDATABASE = "postgres"
   PGUSER = "postgres"
   PGPASSWORD = "sua-senha-supabase"
   PGPORT = "5432"

6. üîÑ Clicar em "Reboot app"

7. ‚è≥ Aguardar deploy completo

8. ‚úÖ Testar: {self.streamlit_url}

üí° Se n√£o funcionar: DELETE a app e RECRIE com as configura√ß√µes acima.
"""
        
        print(instructions)
        
        # Salvar instru√ß√µes
        with open('STREAMLIT_DEPLOY_INSTRUCTIONS.md', 'w', encoding='utf-8') as f:
            f.write(instructions)
        
        self.log("üìã Instru√ß√µes salvas em STREAMLIT_DEPLOY_INSTRUCTIONS.md", "SUCCESS")
    
    def run_complete_diagnosis(self):
        """Executa diagn√≥stico e corre√ß√µes completas"""
        self.log("üöÄ DASHBOARD BAKER v3.0 - DIAGN√ìSTICO COMPLETO", "INFO")
        self.log("=" * 80, "INFO")
        
        # 1. Detectar ambiente
        is_codespace = self.check_environment()
        
        # 2. Sincronizar com GitHub
        self.log("\nüîÑ FASE 1: SINCRONIZA√á√ÉO GITHUB", "ACTION")
        git_ok = self.sync_with_github()
        
        # 3. Verificar arquivos
        self.log("\nüìÅ FASE 2: VERIFICA√á√ÉO DE ARQUIVOS", "ACTION")
        files_ok = self.verify_files()
        
        # 4. Testar Supabase
        self.log("\nüêò FASE 3: CONFIGURA√á√ÉO SUPABASE", "ACTION")
        supabase_ok = self.test_supabase_connection()
        
        # 5. Verificar Streamlit Cloud
        self.log("\nüåê FASE 4: STREAMLIT CLOUD", "ACTION")
        streamlit_ok = self.check_streamlit_app()
        
        # 6. Gerar relat√≥rio final
        self.log("\nüìä RELAT√ìRIO FINAL", "INFO")
        self.log("=" * 50, "INFO")
        
        total_checks = 4
        passed_checks = sum([git_ok, files_ok, supabase_ok, streamlit_ok])
        
        results = {
            "Git/GitHub Sync": "‚úÖ" if git_ok else "‚ùå",
            "Arquivos Essenciais": "‚úÖ" if files_ok else "‚ùå", 
            "Supabase Config": "‚úÖ" if supabase_ok else "‚ùå",
            "Streamlit Cloud": "‚úÖ" if streamlit_ok else "‚ùå"
        }
        
        for check, status in results.items():
            self.log(f"{check}: {status}", "INFO")
        
        self.log(f"\nüéØ RESULTADO: {passed_checks}/{total_checks} verifica√ß√µes OK", "INFO")
        
        # Status final e a√ß√µes
        if passed_checks == total_checks:
            self.log("\nüéâ SISTEMA 100% FUNCIONAL!", "SUCCESS")
            self.log(f"‚úÖ Dashboard online: {self.streamlit_url}", "SUCCESS")
        elif passed_checks >= 3:
            self.log("\n‚ö†Ô∏è SISTEMA QUASE PRONTO - A√ß√µes manuais necess√°rias", "WARNING")
            self.generate_instructions()
        else:
            self.log("\n‚ùå PROBLEMAS CR√çTICOS ENCONTRADOS", "CRITICAL")
            self.log("üîß Corrija os problemas e execute novamente", "ACTION")
        
        # Mostrar problemas e corre√ß√µes
        if self.issues_found:
            self.log(f"\nüö® PROBLEMAS ({len(self.issues_found)}):", "WARNING")
            for issue in self.issues_found:
                self.log(f"  ‚Ä¢ {issue}", "WARNING")
        
        if self.fixes_applied:
            self.log(f"\n‚úÖ CORRE√á√ïES APLICADAS ({len(self.fixes_applied)}):", "SUCCESS")
            for fix in self.fixes_applied:
                self.log(f"  ‚Ä¢ {fix}", "SUCCESS")
        
        return passed_checks >= 3

def main():
    """Fun√ß√£o principal"""
    fixer = MasterFixer()
    success = fixer.run_complete_diagnosis()
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())