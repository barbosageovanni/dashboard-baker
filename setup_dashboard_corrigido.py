#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Setup Autom√°tico - Dashboard Baker com Corre√ß√£o PostgreSQL
Instala e configura tudo automaticamente

Execute: python setup_dashboard_corrigido.py
"""

import os
import sys
import subprocess
import shutil
from datetime import datetime
import urllib.request
import zipfile

class SetupDashboardBaker:
    """Setup completo automatizado"""
    
    def __init__(self):
        self.python_executable = sys.executable
        self.projeto_dir = os.getcwd()
        self.backup_dir = os.path.join(self.projeto_dir, 'backups')
        self.logs = []
        
    def log(self, message):
        """Adiciona log com timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        print(log_message)
        self.logs.append(log_message)
    
    def verificar_python(self):
        """Verifica vers√£o do Python"""
        self.log("üêç Verificando Python...")
        
        version = sys.version_info
        if version.major < 3 or (version.major == 3 and version.minor < 8):
            self.log("‚ùå Python 3.8+ necess√°rio")
            return False
        
        self.log(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
        return True
    
    def instalar_dependencias(self):
        """Instala todas as depend√™ncias necess√°rias"""
        self.log("üì¶ Instalando depend√™ncias...")
        
        dependencias = [
            'streamlit>=1.28.0',
            'pandas>=1.5.0', 
            'plotly>=5.17.0',
            'psycopg2-binary>=2.9.0',
            'python-dotenv>=1.0.0',
            'numpy>=1.24.0',
            'xlsxwriter>=3.1.0',
            'openpyxl>=3.1.0'
        ]
        
        try:
            # Atualizar pip primeiro
            subprocess.run([
                self.python_executable, '-m', 'pip', 'install', '--upgrade', 'pip'
            ], check=True, capture_output=True)
            
            # Instalar depend√™ncias
            for dep in dependencias:
                self.log(f"üì¶ Instalando {dep}...")
                result = subprocess.run([
                    self.python_executable, '-m', 'pip', 'install', dep
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    self.log(f"‚úÖ {dep} instalado")
                else:
                    self.log(f"‚ö†Ô∏è Aviso ao instalar {dep}: {result.stderr[:100]}")
            
            return True
            
        except subprocess.CalledProcessError as e:
            self.log(f"‚ùå Erro ao instalar depend√™ncias: {e}")
            return False
        except Exception as e:
            self.log(f"‚ùå Erro inesperado: {e}")
            return False
    
    def criar_estrutura_pastas(self):
        """Cria estrutura de pastas necess√°ria"""
        self.log("üìÅ Criando estrutura de pastas...")
        
        pastas = [
            'data',           # Arquivos CSV de entrada
            'exports',        # Relat√≥rios gerados
            'backups',        # Backups autom√°ticos
            'logs',           # Logs do sistema
            'config',         # Arquivos de configura√ß√£o
            'temp'            # Arquivos tempor√°rios
        ]
        
        for pasta in pastas:
            pasta_path = os.path.join(self.projeto_dir, pasta)
            if not os.path.exists(pasta_path):
                os.makedirs(pasta_path)
                self.log(f"‚úÖ Pasta criada: {pasta}")
            else:
                self.log(f"‚ÑπÔ∏è Pasta j√° existe: {pasta}")
        
        return True
    
    def criar_arquivo_env(self):
        """Cria arquivo .env com configura√ß√µes"""
        self.log("‚öôÔ∏è Criando arquivo de configura√ß√£o...")
        
        env_path = os.path.join(self.projeto_dir, '.env')
        
        if os.path.exists(env_path):
            self.log("‚ÑπÔ∏è Arquivo .env j√° existe, criando .env.exemplo")
            env_path = os.path.join(self.projeto_dir, '.env.exemplo')
        
        env_content = f"""# Dashboard Baker - Configura√ß√µes de Banco de Dados
# Arquivo criado automaticamente em {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

# =============================================================================
# SUPABASE POSTGRESQL (PRIORIDADE 1)
# =============================================================================
SUPABASE_HOST=db.lijtncazuwnbydeqtoyz.supabase.co
SUPABASE_DB=postgres
SUPABASE_USER=postgres
SUPABASE_PASSWORD=SUBSTITUA_PELA_SUA_SENHA_AQUI
SUPABASE_PORT=5432

# =============================================================================
# POSTGRESQL LOCAL (PRIORIDADE 2) 
# =============================================================================
LOCAL_DB_HOST=localhost
LOCAL_DB_NAME=dashboard_baker
LOCAL_DB_USER=postgres
LOCAL_DB_PASSWORD=senha123
LOCAL_DB_PORT=5432

# =============================================================================
# RENDER POSTGRESQL (PRIORIDADE 3)
# =============================================================================
RENDER_HOST=
RENDER_DB=
RENDER_USER=
RENDER_PASSWORD=
RENDER_PORT=5432

# =============================================================================
# RAILWAY POSTGRESQL (PRIORIDADE 4)
# =============================================================================
RAILWAY_HOST=
RAILWAY_DB=
RAILWAY_USER=
RAILWAY_PASSWORD=
RAILWAY_PORT=5432

# =============================================================================
# CONFIGURA√á√ïES GERAIS
# =============================================================================
# Timeout de conex√£o (segundos)
DB_TIMEOUT=10

# Modo SSL (require, prefer, disable)
DB_SSL_MODE=require

# Debug mode (true/false)
DEBUG_MODE=false

# Dashboard settings
DASHBOARD_PORT=8501
DASHBOARD_HOST=localhost
"""
        
        try:
            with open(env_path, 'w', encoding='utf-8') as f:
                f.write(env_content)
            self.log(f"‚úÖ Arquivo criado: {os.path.basename(env_path)}")
            return True
        except Exception as e:
            self.log(f"‚ùå Erro ao criar .env: {e}")
            return False
    
    def fazer_backup_dashboard(self):
        """Cria backup do dashboard se existir"""
        self.log("üíæ Verificando backups...")
        
        dashboard_file = "dashboard_baker_web_corrigido.py"
        
        if not os.path.exists(dashboard_file):
            self.log("‚ÑπÔ∏è Dashboard n√£o encontrado, continuando instala√ß√£o")
            return True
        
        # Criar backup
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(self.backup_dir, f"dashboard_backup_{timestamp}.py")
        
        try:
            shutil.copy2(dashboard_file, backup_file)
            self.log(f"‚úÖ Backup criado: {os.path.basename(backup_file)}")
            return True
        except Exception as e:
            self.log(f"‚ùå Erro ao criar backup: {e}")
            return False
    
    def aplicar_correcoes_dashboard(self):
        """Aplica corre√ß√µes no dashboard existente"""
        self.log("üîß Aplicando corre√ß√µes no dashboard...")
        
        dashboard_file = "dashboard_baker_web_corrigido.py"
        
        if not os.path.exists(dashboard_file):
            self.log("‚ö†Ô∏è Dashboard n√£o encontrado, pulando corre√ß√µes")
            return True
        
        try:
            # Ler arquivo atual
            with open(dashboard_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Verificar se j√° tem corre√ß√µes
            if 'sistema de fallback robusto' in content.lower():
                self.log("‚úÖ Dashboard j√° tem corre√ß√µes aplicadas")
                return True
            
            # Aplicar patch na fun√ß√£o de configura√ß√£o
            nova_funcao = '''def carregar_configuracao_banco():
    """Carrega configura√ß√£o do banco com sistema de fallback robusto"""
    
    import psycopg2
    from dotenv import load_dotenv
    
    # Carregar vari√°veis de ambiente
    load_dotenv()
    
    # Configura√ß√µes em ordem de prioridade
    configs = [
        {
            'nome': 'Supabase Cloud',
            'host': os.getenv('SUPABASE_HOST', 'db.lijtncazuwnbydeqtoyz.supabase.co'),
            'database': os.getenv('SUPABASE_DB', 'postgres'),
            'user': os.getenv('SUPABASE_USER', 'postgres'),
            'password': os.getenv('SUPABASE_PASSWORD', ''),
            'port': int(os.getenv('SUPABASE_PORT', '5432')),
            'sslmode': 'require',
            'connect_timeout': 10
        },
        {
            'nome': 'PostgreSQL Local',
            'host': os.getenv('LOCAL_DB_HOST', 'localhost'),
            'database': os.getenv('LOCAL_DB_NAME', 'dashboard_baker'),
            'user': os.getenv('LOCAL_DB_USER', 'postgres'),
            'password': os.getenv('LOCAL_DB_PASSWORD', 'senha123'),
            'port': int(os.getenv('LOCAL_DB_PORT', '5432')),
            'connect_timeout': 5
        }
    ]
    
    # Testar cada configura√ß√£o
    for config in configs:
        if not config.get('password'):
            continue
            
        try:
            # Limpar config para psycopg2
            clean_config = {k: v for k, v in config.items() 
                          if k in ['host', 'database', 'user', 'password', 'port', 'sslmode', 'connect_timeout']}
            
            # Testar conex√£o
            conn = psycopg2.connect(**clean_config)
            cursor = conn.cursor()
            cursor.execute("SELECT 1")
            cursor.close()
            conn.close()
            
            print(f"‚úÖ Conectado: {config['nome']}")
            return clean_config
            
        except Exception as e:
            print(f"‚ö†Ô∏è {config['nome']}: {str(e)[:80]}...")
            continue
    
    # Fallback padr√£o
    return {
        'host': 'localhost',
        'database': 'dashboard_baker',
        'user': 'postgres',
        'password': 'senha123',
        'port': 5432
    }'''
            
            # Substituir fun√ß√£o existente
            import re
            pattern = r'def carregar_configuracao_banco\(\):.*?return config'
            
            if re.search(pattern, content, re.DOTALL):
                content = re.sub(pattern, nova_funcao, content, flags=re.DOTALL)
                
                # Salvar arquivo corrigido
                with open(dashboard_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                self.log("‚úÖ Corre√ß√µes aplicadas no dashboard")
                return True
            else:
                self.log("‚ö†Ô∏è N√£o foi poss√≠vel localizar fun√ß√£o para corrigir")
                return True
                
        except Exception as e:
            self.log(f"‚ùå Erro ao aplicar corre√ß√µes: {e}")
            return False
    
    def testar_sistema(self):
        """Testa se o sistema est√° funcionando"""
        self.log("üß™ Testando sistema...")
        
        try:
            # Testar importa√ß√µes
            import streamlit
            import pandas
            import plotly
            import psycopg2
            from dotenv import load_dotenv
            
            self.log("‚úÖ Todas as bibliotecas importadas com sucesso")
            
            # Testar configura√ß√£o de ambiente
            load_dotenv()
            
            # Testar se dashboard pode ser importado
            dashboard_file = "dashboard_baker_web_corrigido.py"
            if os.path.exists(dashboard_file):
                self.log("‚úÖ Dashboard encontrado e acess√≠vel")
            
            return True
            
        except ImportError as e:
            self.log(f"‚ùå Erro de importa√ß√£o: {e}")
            return False
        except Exception as e:
            self.log(f"‚ùå Erro no teste: {e}")
            return False
    
    def criar_scripts_uteis(self):
        """Cria scripts √∫teis para o usu√°rio"""
        self.log("üìù Criando scripts √∫teis...")
        
        # Script para iniciar dashboard
        iniciar_script = f'''#!/usr/bin/env python3
"""Script para iniciar Dashboard Baker"""

import os
import subprocess
import sys

def main():
    print("üöÄ Iniciando Dashboard Baker...")
    
    # Verificar arquivo
    if not os.path.exists("dashboard_baker_web_corrigido.py"):
        print("‚ùå Dashboard n√£o encontrado!")
        return
    
    # Iniciar Streamlit
    try:
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", 
            "dashboard_baker_web_corrigido.py",
            "--server.port", "8501"
        ])
    except KeyboardInterrupt:
        print("\\nüëã Dashboard encerrado pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro: {{e}}")

if __name__ == "__main__":
    main()
'''
        
        # Script de diagn√≥stico
        diagnostico_script = '''#!/usr/bin/env python3
"""Script de diagn√≥stico r√°pido"""

import os
import sys

def diagnosticar():
    print("üîç DIAGN√ìSTICO DASHBOARD BAKER")
    print("="*40)
    
    # Python
    print(f"üêç Python: {sys.version}")
    
    # Bibliotecas
    libs = ['streamlit', 'pandas', 'plotly', 'psycopg2']
    for lib in libs:
        try:
            __import__(lib)
            print(f"‚úÖ {lib}: OK")
        except ImportError:
            print(f"‚ùå {lib}: AUSENTE")
    
    # Arquivos
    arquivos = ['.env', 'dashboard_baker_web_corrigido.py']
    for arquivo in arquivos:
        if os.path.exists(arquivo):
            print(f"‚úÖ {arquivo}: OK")
        else:
            print(f"‚ùå {arquivo}: AUSENTE")
    
    # Pastas
    pastas = ['data', 'exports', 'backups']
    for pasta in pastas:
        if os.path.exists(pasta):
            print(f"‚úÖ {pasta}/: OK")
        else:
            print(f"‚ùå {pasta}/: AUSENTE")

if __name__ == "__main__":
    diagnosticar()
'''
        
        try:
            # Salvar scripts
            with open('iniciar_dashboard.py', 'w', encoding='utf-8') as f:
                f.write(iniciar_script)
            
            with open('diagnostico.py', 'w', encoding='utf-8') as f:
                f.write(diagnostico_script)
            
            self.log("‚úÖ Scripts √∫teis criados")
            return True
            
        except Exception as e:
            self.log(f"‚ùå Erro ao criar scripts: {e}")
            return False
    
    def gerar_relatorio_instalacao(self):
        """Gera relat√≥rio final da instala√ß√£o"""
        self.log("üìä Gerando relat√≥rio de instala√ß√£o...")
        
        relatorio = f"""
# RELAT√ìRIO DE INSTALA√á√ÉO - DASHBOARD BAKER
{'='*60}

**Data/Hora:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}  
**Diret√≥rio:** {self.projeto_dir}  
**Python:** {sys.version}

## ‚úÖ INSTALA√á√ÉO CONCLU√çDA

### üì¶ Depend√™ncias Instaladas:
- streamlit (interface web)
- pandas (manipula√ß√£o de dados)  
- plotly (gr√°ficos interativos)
- psycopg2-binary (PostgreSQL)
- python-dotenv (vari√°veis ambiente)
- numpy, xlsxwriter, openpyxl

### üìÅ Estrutura Criada:
```
{os.path.basename(self.projeto_dir)}/
‚îú‚îÄ‚îÄ dashboard_baker_web_corrigido.py  # Dashboard principal
‚îú‚îÄ‚îÄ .env                              # Configura√ß√µes
‚îú‚îÄ‚îÄ iniciar_dashboard.py              # Script de in√≠cio
‚îú‚îÄ‚îÄ diagnostico.py                    # Script de teste
‚îú‚îÄ‚îÄ data/                             # Arquivos CSV
‚îú‚îÄ‚îÄ exports/                          # Relat√≥rios
‚îú‚îÄ‚îÄ backups/                          # Backups
‚îî‚îÄ‚îÄ logs/                             # Logs do sistema
```

## üöÄ PR√ìXIMOS PASSOS

### 1. Configure suas credenciais:
```bash
# Edite o arquivo .env com suas credenciais reais
nano .env
```

### 2. Inicie o dashboard:
```bash
# Op√ß√£o 1: Script autom√°tico
python iniciar_dashboard.py

# Op√ß√£o 2: Comando direto
streamlit run dashboard_baker_web_corrigido.py
```

### 3. Acesse no navegador:
```
http://localhost:8501
```

## üîß COMANDOS √öTEIS

```bash
# Diagn√≥stico do sistema
python diagnostico.py

# Atualizar depend√™ncias
pip install -r requirements.txt --upgrade

# Ver logs de instala√ß√£o
cat logs/instalacao.log
```

## üìû SUPORTE

Se houver problemas:
1. Execute `python diagnostico.py`
2. Verifique arquivo `.env`
3. Consulte logs em `logs/`

---
**Dashboard Baker v3.0 - Sistema Avan√ßado de Gest√£o Financeira**
"""
        
        try:
            # Salvar logs detalhados
            log_file = os.path.join('logs', f'instalacao_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write('\n'.join(self.logs))
            
            # Salvar relat√≥rio
            with open('RELATORIO_INSTALACAO.md', 'w', encoding='utf-8') as f:
                f.write(relatorio)
            
            self.log("‚úÖ Relat√≥rio salvo: RELATORIO_INSTALACAO.md")
            return True
            
        except Exception as e:
            self.log(f"‚ùå Erro ao gerar relat√≥rio: {e}")
            return False
    
    def executar_setup_completo(self):
        """Executa setup completo automatizado"""
        
        print("üöÄ SETUP DASHBOARD BAKER - INSTALA√á√ÉO COMPLETA")
        print("="*60)
        print(f"Diret√≥rio: {self.projeto_dir}")
        print(f"Python: {sys.executable}")
        print()
        
        etapas = [
            ("üêç Verificando Python", self.verificar_python),
            ("üìÅ Criando estrutura", self.criar_estrutura_pastas),
            ("üì¶ Instalando depend√™ncias", self.instalar_dependencias),
            ("‚öôÔ∏è Criando configura√ß√£o", self.criar_arquivo_env),
            ("üíæ Fazendo backup", self.fazer_backup_dashboard),
            ("üîß Aplicando corre√ß√µes", self.aplicar_correcoes_dashboard),
            ("üìù Criando scripts", self.criar_scripts_uteis),
            ("üß™ Testando sistema", self.testar_sistema),
            ("üìä Gerando relat√≥rio", self.gerar_relatorio_instalacao)
        ]
        
        sucesso_geral = True
        
        for i, (descricao, funcao) in enumerate(etapas, 1):
            print(f"\n[{i}/{len(etapas)}] {descricao}")
            print("-" * 40)
            
            try:
                sucesso = funcao()
                if not sucesso:
                    sucesso_geral = False
                    self.log(f"‚ö†Ô∏è Etapa falhou: {descricao}")
            except Exception as e:
                self.log(f"‚ùå Erro na etapa '{descricao}': {e}")
                sucesso_geral = False
        
        # Resultado final
        print("\n" + "="*60)
        if sucesso_geral:
            print("üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print()
            print("üöÄ PR√ìXIMOS PASSOS:")
            print("1. Edite o arquivo .env com suas credenciais")
            print("2. Execute: python iniciar_dashboard.py")
            print("3. Acesse: http://localhost:8501")
            print()
            print("üìã ARQUIVOS IMPORTANTES:")
            print("‚Ä¢ .env - Configura√ß√µes do banco")
            print("‚Ä¢ iniciar_dashboard.py - Iniciar sistema")
            print("‚Ä¢ diagnostico.py - Testar sistema")
            print("‚Ä¢ RELATORIO_INSTALACAO.md - Documenta√ß√£o")
        else:
            print("‚ö†Ô∏è INSTALA√á√ÉO CONCLU√çDA COM AVISOS")
            print("üìã Verifique os logs para detalhes")
            print("üîß Execute 'python diagnostico.py' para verificar")
        
        return sucesso_geral

def main():
    """Fun√ß√£o principal"""
    
    try:
        setup = SetupDashboardBaker()
        setup.executar_setup_completo()
        
    except KeyboardInterrupt:
        print("\n‚ùå Instala√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico durante instala√ß√£o: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()