#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CONFIGURAR DASHBOARD COM SUPABASE POSTGRESQL
Dashboard Baker - Setup Final
"""

import psycopg2
import os
from datetime import datetime

def extrair_host_do_url(supabase_url):
    """Extrai host PostgreSQL do URL do Supabase"""
    # De: https://lijtncazuwnbydeqtoyz.supabase.co
    # Para: db.lijtncazuwnbydeqtoyz.supabase.co
    
    if 'https://' in supabase_url:
        domain = supabase_url.replace('https://', '')
        project_id = domain.replace('.supabase.co', '')
        return f'db.{project_id}.supabase.co'
    
    return None

def solicitar_credenciais_supabase():
    """Solicita credenciais PostgreSQL do Supabase"""
    print("üåü CONFIGURA√á√ÉO SUPABASE POSTGRESQL")
    print("=" * 50)
    print()
    print("üìã ONDE ENCONTRAR AS CREDENCIAIS CORRETAS:")
    print("   1. No Supabase: Settings ‚Üí Database")
    print("   2. Procure por 'Connection info' (n√£o API settings)")
    print("   3. Use as credenciais de CONNECTION STRING")
    print()
    
    # URL que o usu√°rio j√° mostrou
    supabase_url = "https://lijtncazuwnbydeqtoyz.supabase.co"
    host_postgresql = extrair_host_do_url(supabase_url)
    
    print(f"‚úÖ URL do projeto: {supabase_url}")
    print(f"‚úÖ Host PostgreSQL (calculado): {host_postgresql}")
    print()
    
    # Solicitar senha
    print("üîë Agora preciso da SENHA do DATABASE:")
    print("   (A senha que voc√™ criou quando criou o projeto)")
    password = input("Password: ").strip()
    
    if not password:
        print("‚ùå Senha √© obrigat√≥ria!")
        return None
    
    # Credenciais completas
    credenciais = {
        'host': host_postgresql,
        'database': 'postgres',
        'user': 'postgres',
        'password': password,
        'port': 5432
    }
    
    print("\nüìã CREDENCIAIS POSTGRESQL:")
    for key, value in credenciais.items():
        if key == 'password':
            print(f"   {key}: {'*' * len(value)}")
        else:
            print(f"   {key}: {value}")
    
    return credenciais

def testar_conexao_supabase_postgresql(credenciais):
    """Testa conex√£o PostgreSQL com Supabase"""
    print(f"\nüîå TESTANDO CONEX√ÉO SUPABASE POSTGRESQL...")
    
    try:
        config = credenciais.copy()
        config.update({
            'sslmode': 'require',
            'connect_timeout': 15
        })
        
        print("   Conectando...", end="")
        conn = psycopg2.connect(**config)
        print(" ‚úÖ Conectado!")
        
        cursor = conn.cursor()
        
        # Verificar se tabela existe e tem dados
        cursor.execute("""
            SELECT COUNT(*) FROM information_schema.tables 
            WHERE table_name = 'dashboard_baker'
        """)
        table_exists = cursor.fetchone()[0] > 0
        
        if table_exists:
            cursor.execute("SELECT COUNT(*) FROM dashboard_baker")
            total_registros = cursor.fetchone()[0]
            
            cursor.execute("SELECT SUM(valor_total) FROM dashboard_baker")
            valor_total = cursor.fetchone()[0] or 0
            
            print(f"   ‚úÖ Tabela dashboard_baker: {total_registros} registros")
            print(f"   ‚úÖ Valor total: R$ {valor_total:,.2f}")
        else:
            print("   ‚ö†Ô∏è Tabela dashboard_baker n√£o encontrada")
        
        cursor.execute("SELECT version()")
        version = cursor.fetchone()[0]
        print(f"   ‚úÖ PostgreSQL: {version[:50]}...")
        
        cursor.close()
        conn.close()
        
        print("   üéâ SUPABASE POSTGRESQL FUNCIONANDO!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        
        # Dicas baseadas no erro
        error_str = str(e).lower()
        if "authentication failed" in error_str:
            print("   üí° Senha incorreta - verifique a senha do projeto")
        elif "could not translate host name" in error_str:
            print("   üí° Host incorreto - verifique o Project URL")
        elif "connection refused" in error_str:
            print("   üí° Conex√£o recusada - verifique se PostgreSQL est√° ativo")
        
        return False

def criar_env_supabase_final(credenciais, supabase_url, anon_key):
    """Cria .env final com credenciais Supabase"""
    print(f"\nüíæ CRIANDO ARQUIVO .ENV FINAL...")
    
    # Backup
    if os.path.exists('.env'):
        backup = f'.env.backup.supabase_final.{datetime.now().strftime("%Y%m%d_%H%M%S")}'
        os.rename('.env', backup)
        print(f"   üíæ Backup: {backup}")
    
    # Criar .env completo
    conteudo_env = f'''# ========================================
# SUPABASE POSTGRESQL - CONFIGURA√á√ÉO FINAL
# Dashboard Baker - Sistema Funcionando
# Criado em: {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}
# ========================================

# SUPABASE POSTGRESQL (Para Dashboard Python)
SUPABASE_HOST={credenciais['host']}
SUPABASE_DB={credenciais['database']}
SUPABASE_USER={credenciais['user']}
SUPABASE_PASSWORD={credenciais['password']}
SUPABASE_PORT={credenciais['port']}

# COMPATIBILIDADE (Para scripts existentes)
PGHOST={credenciais['host']}
PGDATABASE={credenciais['database']}
PGUSER={credenciais['user']}
PGPASSWORD={credenciais['password']}
PGPORT={credenciais['port']}

# SUPABASE API (Para futuras integra√ß√µes)
SUPABASE_URL={supabase_url}
SUPABASE_ANON_KEY={anon_key}

# LOCAL DATABASE (Desenvolvimento)
LOCAL_DB_PASSWORD=senha123

# CONFIGURA√á√ïES
DEBUG=True
ENVIRONMENT=production
DATABASE_PROVIDER=supabase
VALIDATED=true

# ========================================
# STATUS FINAL:
# ========================================
# ‚úÖ Supabase PostgreSQL configurado
# ‚úÖ Dados migrados e dispon√≠veis
# ‚úÖ Dashboard pronto para uso
# ‚úÖ Sistema completo funcionando
'''
    
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(conteudo_env)
    
    print("   ‚úÖ .env criado com configura√ß√£o completa!")

def testar_dashboard_local():
    """Testa se o dashboard funciona localmente"""
    print(f"\nüöÄ TESTAR DASHBOARD AGORA? (s/n): ", end="")
    resposta = input().lower()
    
    if resposta not in ['s', 'sim', 'y', 'yes']:
        return False
    
    print(f"\n‚ö° TESTANDO DASHBOARD LOCALMENTE...")
    
    try:
        # Verificar se arquivo existe
        if not os.path.exists('dashboard_baker_web_corrigido.py'):
            print("   ‚ùå Arquivo dashboard_baker_web_corrigido.py n√£o encontrado")
            return False
        
        print("   ‚úÖ Arquivo dashboard encontrado")
        
        # Importar e testar configura√ß√£o b√°sica
        import sys
        sys.path.append('.')
        
        # Testar carregamento do .env
        try:
            from dotenv import load_dotenv
            load_dotenv()
            print("   ‚úÖ .env carregado com sucesso")
        except ImportError:
            print("   ‚ö†Ô∏è python-dotenv n√£o instalado, usando os.environ")
        
        # Verificar vari√°veis
        pghost = os.getenv('PGHOST') or os.getenv('SUPABASE_HOST')
        pgpassword = os.getenv('PGPASSWORD') or os.getenv('SUPABASE_PASSWORD')
        
        if pghost and pgpassword:
            print(f"   ‚úÖ Vari√°veis de ambiente carregadas")
            print(f"   ‚úÖ Host: {pghost}")
            print(f"   ‚úÖ Password: {'*' * len(pgpassword)}")
        else:
            print("   ‚ùå Vari√°veis de ambiente n√£o carregadas corretamente")
            return False
        
        print("\n   üéØ Para iniciar o dashboard:")
        print("   python dashboard_baker_web_corrigido.py")
        print("   Ou: streamlit run dashboard_baker_web_corrigido.py")
        print("   Acesse: http://localhost:8501")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro no teste: {e}")
        return False

def mostrar_passos_finais():
    """Mostra os passos finais para usar o sistema"""
    print("\nüéâ CONFIGURA√á√ÉO SUPABASE CONCLU√çDA!")
    print("=" * 50)
    print("‚úÖ SISTEMA COMPLETAMENTE CONFIGURADO!")
    print()
    print("üéØ PARA USAR O DASHBOARD:")
    print("   1. Execute: python dashboard_baker_web_corrigido.py")
    print("   2. Acesse: http://localhost:8501")
    print("   3. Visualize seus dados!")
    print()
    print("üåü VANTAGENS DO SUPABASE:")
    print("   üìä Dashboard visual: https://lijtncazuwnbydeqtoyz.supabase.co")
    print("   üîÑ API REST autom√°tica criada")
    print("   üíæ Backup autom√°tico ativo")
    print("   üõ°Ô∏è SSL e seguran√ßa configurados")
    print("   üìà Monitoramento em tempo real")
    print()
    print("üîß ARQUIVOS IMPORTANTES:")
    print("   üìÑ .env - Credenciais configuradas")
    print("   üêç dashboard_baker_web_corrigido.py - Dashboard principal")
    print("   üíæ Backups .env em .env.backup.*")
    print()
    print("üéØ PR√ìXIMOS DESENVOLVIMENTOS:")
    print("   ‚Ä¢ Deploy autom√°tico")
    print("   ‚Ä¢ Dom√≠nio personalizado")
    print("   ‚Ä¢ Notifica√ß√µes por email")
    print("   ‚Ä¢ Relat√≥rios automatizados")

def main():
    """Fun√ß√£o principal"""
    print("üåü CONFIGURA√á√ÉO FINAL - SUPABASE POSTGRESQL")
    print("=" * 60)
    print()
    
    # Credenciais que o usu√°rio j√° mostrou
    supabase_url = "https://lijtncazuwnbydeqtoyz.supabase.co"
    anon_key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxpanRuY2F6dXduYnlkZXF0b3l6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQzMDYzNzQsImV4cCI6MjA2OTg4MjM3NH0.CWlCET_RIAPyb7tsKKG0XikBN1tkdfm5HvMzikXwuhA"
    
    print("‚úÖ Dados do Supabase identificados:")
    print(f"   üåê URL: {supabase_url}")
    print(f"   üîë API Key: {anon_key[:20]}...{anon_key[-10:]}")
    print()
    
    # 1. Solicitar credenciais PostgreSQL
    credenciais = solicitar_credenciais_supabase()
    
    if not credenciais:
        print("‚ùå Credenciais inv√°lidas")
        return False
    
    # 2. Testar conex√£o
    if not testar_conexao_supabase_postgresql(credenciais):
        print("‚ùå Conex√£o falhou")
        print("üí° Verifique a senha no Supabase: Settings ‚Üí Database")
        return False
    
    # 3. Criar .env
    criar_env_supabase_final(credenciais, supabase_url, anon_key)
    
    # 4. Testar dashboard
    testar_dashboard_local()
    
    # 5. Mostrar passos finais
    mostrar_passos_finais()
    
    return True

if __name__ == "__main__":
    main()