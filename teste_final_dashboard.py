#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste Final do Dashboard Baker - Valida√ß√£o Completa
Testa todas as funcionalidades ap√≥s corre√ß√£o do trigger PostgreSQL
"""

import os
import sys
import subprocess
import psycopg2
from psycopg2.extras import RealDictCursor
import pandas as pd
from datetime import datetime, timedelta
import tempfile
import time

# Configura√ß√µes de banco
DB_CONFIG = {
    'host': 'junction.proxy.rlwy.net',
    'port': 19164,
    'database': 'railway',
    'user': 'postgres',
    'password': 'sRKGcvNqjPXHTtaaBHZBlNYYJFRhBLqY'
}

def test_database_connection():
    """Testa conex√£o com banco"""
    print("üîå Testando conex√£o com banco...")
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        cursor.close()
        conn.close()
        print("‚úÖ Conex√£o com banco OK")
        return True
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return False

def test_trigger_funcionality():
    """Testa se o trigger est√° funcionando corretamente"""
    print("\nüîß Testando trigger update_updated_at_column...")
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        # Cria tabela de teste se n√£o existir
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS teste_trigger (
                id SERIAL PRIMARY KEY,
                nome VARCHAR(100),
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Insere um registro
        cursor.execute("INSERT INTO teste_trigger (nome) VALUES ('teste') RETURNING id")
        test_id = cursor.fetchone()[0]
        
        # Atualiza o registro e verifica se trigger funciona
        cursor.execute("UPDATE teste_trigger SET nome = 'teste_atualizado' WHERE id = %s", (test_id,))
        
        # Limpa tabela de teste
        cursor.execute("DROP TABLE IF EXISTS teste_trigger")
        
        conn.commit()
        cursor.close()
        conn.close()
        print("‚úÖ Trigger funcionando corretamente")
        return True
    except Exception as e:
        print(f"‚ùå Erro no trigger: {e}")
        return False

def test_data_availability():
    """Testa disponibilidade de dados principais"""
    print("\nüìä Testando disponibilidade de dados...")
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # Testa tabela principal
        cursor.execute("SELECT COUNT(*) as total FROM dados_financeiros")
        total = cursor.fetchone()['total']
        print(f"‚úÖ Dados financeiros: {total} registros")
        
        # Testa se h√° dados recentes
        cursor.execute("""
            SELECT COUNT(*) as recentes 
            FROM dados_financeiros 
            WHERE data_baixa >= CURRENT_DATE - INTERVAL '30 days'
        """)
        recentes = cursor.fetchone()['recentes']
        print(f"‚úÖ Dados recentes (30 dias): {recentes} registros")
        
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Erro ao verificar dados: {e}")
        return False

def test_calculations():
    """Testa c√°lculos principais do dashboard"""
    print("\nüßÆ Testando c√°lculos do dashboard...")
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # Testa c√°lculo de valores
        cursor.execute("""
            SELECT 
                COUNT(*) as total_registros,
                SUM(COALESCE(valor_total, 0)) as valor_total,
                COUNT(CASE WHEN data_baixa IS NOT NULL THEN 1 END) as total_baixados
            FROM dados_financeiros
        """)
        resultado = cursor.fetchone()
        
        print(f"‚úÖ Total de registros: {resultado['total_registros']}")
        print(f"‚úÖ Valor total: R$ {resultado['valor_total']:,.2f}" if resultado['valor_total'] else "‚úÖ Valor total: R$ 0,00")
        print(f"‚úÖ Total baixados: {resultado['total_baixados']}")
        
        # Testa c√°lculo de envio final pendente
        cursor.execute("""
            SELECT COUNT(*) as envio_final_pendente
            FROM dados_financeiros
            WHERE data_atesto IS NOT NULL 
            AND data_baixa IS NULL
            AND data_atesto + INTERVAL '1 day' <= CURRENT_DATE
        """)
        envio_final = cursor.fetchone()['envio_final_pendente']
        print(f"‚úÖ Envio Final Pendente: {envio_final}")
        
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Erro nos c√°lculos: {e}")
        return False

def test_syntax_and_imports():
    """Testa sintaxe do arquivo principal"""
    print("\nüêç Testando sintaxe do dashboard...")
    try:
        import py_compile
        py_compile.compile('dashboard_baker_web_corrigido.py', doraise=True)
        print("‚úÖ Sintaxe Python v√°lida")
        return True
    except Exception as e:
        print(f"‚ùå Erro de sintaxe: {e}")
        return False

def test_downloads_functionality():
    """Testa funcionalidades de download"""
    print("\nüì• Testando funcionalidades de download...")
    try:
        # Simula dados para teste
        data = {
            'numero_cte': ['123456', '789012'],
            'valor_total': [1000.50, 2500.75],
            'status': ['Baixado', 'Pendente']
        }
        df = pd.DataFrame(data)
        
        # Testa convers√£o para diferentes formatos
        with tempfile.TemporaryDirectory() as temp_dir:
            # Teste CSV
            csv_path = os.path.join(temp_dir, 'teste.csv')
            df.to_csv(csv_path, index=False, encoding='utf-8-sig')
            assert os.path.exists(csv_path)
            print("‚úÖ Gera√ß√£o de CSV OK")
            
            # Teste Excel
            excel_path = os.path.join(temp_dir, 'teste.xlsx')
            df.to_excel(excel_path, index=False, engine='openpyxl')
            assert os.path.exists(excel_path)
            print("‚úÖ Gera√ß√£o de Excel OK")
            
        return True
    except Exception as e:
        print(f"‚ùå Erro nos downloads: {e}")
        return False

def run_complete_test():
    """Executa todos os testes"""
    print("üöÄ INICIANDO TESTE FINAL DO DASHBOARD BAKER")
    print("=" * 50)
    
    tests = [
        ("Conex√£o com Banco", test_database_connection),
        ("Trigger PostgreSQL", test_trigger_funcionality),
        ("Disponibilidade de Dados", test_data_availability),
        ("C√°lculos do Dashboard", test_calculations),
        ("Sintaxe Python", test_syntax_and_imports),
        ("Funcionalidades de Download", test_downloads_functionality)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico no teste {test_name}: {e}")
            results.append((test_name, False))
    
    # Resultado final
    print("\n" + "=" * 50)
    print("üìã RESUMO DOS TESTES:")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print("=" * 50)
    print(f"üéØ RESULTADO FINAL: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Dashboard Baker est√° funcionando perfeitamente!")
        print("‚úÖ Trigger PostgreSQL corrigido com sucesso!")
        print("‚úÖ Sistema pronto para produ√ß√£o!")
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verifique os logs acima.")
    
    return passed == total

if __name__ == "__main__":
    success = run_complete_test()
    sys.exit(0 if success else 1)
