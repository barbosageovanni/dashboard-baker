#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Configura√ß√£o de Mapeamento de Colunas - Dashboard Baker
Define mapeamento padr√£o e alternativo para importa√ß√£o de CSVs
VERS√ÉO: 2.1 - Corrigida para incluir envio_final
"""

from datetime import datetime

# ============================================================================
# CONFIGURA√á√ÉO PRINCIPAL DE MAPEAMENTO
# ============================================================================

# Vers√£o da configura√ß√£o
CONFIG_VERSION = "2.1"
CONFIG_DATE = "2025-07-31"

# Mapeamento principal baseado no arquivo real
MAPEAMENTO_PRINCIPAL = {
    # Campo no banco -> Coluna no CSV
    'numero_cte': 'CTE',
    'destinatario_nome': 'Remetente - Nome', 
    'veiculo_placa': 'Ve√≠culo - Placa',
    'valor_total': 'Total',
    'data_emissao': 'Data emiss√£o Cte',
    'data_rq_tmc': 'Data RQ/TMC',
    'data_envio_processo': 'Data Envio do processo Faturamento',
    'data_inclusao_fatura': 'Data INCLUS√ÉO Fatura Bsoft',
    'primeiro_envio': '1¬∞ Envio',
    'data_atesto': 'Data do atesto',
    'envio_final': 'Envio final',  # ‚≠ê CAMPO CR√çTICO
    'numero_fatura': 'Faturas',
    'observacao': 'OBSERVA√á√ÉO'
}

# Mapeamentos alternativos (caso as colunas tenham nomes diferentes)
MAPEAMENTOS_ALTERNATIVOS = {
    'numero_cte': [
        'CTE', 'Numero CTE', 'NumCTE', 'N CTE', 'N¬∫ CTE'
    ],
    'destinatario_nome': [
        'Remetente - Nome', 'Destinatario', 'Cliente', 'Remetente',
        'Destinat√°rio - Nome', 'Nome Destinatario', 'Nome Cliente'
    ],
    'veiculo_placa': [
        'Ve√≠culo - Placa', 'Veiculo', 'Placa', 'Veiculo - Placa',
        'Placa Veiculo', 'Placa do Veiculo'
    ],
    'valor_total': [
        'Total', 'Valor', 'Valor Total', 'Valor do CTE', 'Vlr Total'
    ],
    'data_emissao': [
        'Data emiss√£o Cte', 'Data Emissao', 'Emissao', 'Data CTE',
        'Data de emiss√£o', 'Dt Emissao'
    ],
    'data_rq_tmc': [
        'Data RQ/TMC', 'RQ/TMC', 'Data RQ', 'Data TMC',
        'RQ TMC', 'Data RQ-TMC'
    ],
    'data_envio_processo': [
        'Data Envio do processo Faturamento', 'Envio Processo',
        'Data Envio Processo', 'Envio do Processo'
    ],
    'data_inclusao_fatura': [
        'Data INCLUS√ÉO Fatura Bsoft', 'Inclus√£o Fatura', 'Inclusao Fatura',
        'Data Inclusao', 'Dt Inclusao Fatura'
    ],
    'primeiro_envio': [
        '1¬∞ Envio', '1¬∫ Envio', 'Primeiro Envio', '1 Envio',
        'Primeiro envio', '1¬∞ envio'
    ],
    'data_atesto': [
        'Data do atesto', 'Atesto', 'Data Atesto', 'Dt Atesto',
        'Data de Atesto', 'Data do Atesto'
    ],
    'envio_final': [
        'Envio final', 'Envio Final', 'Final', 'Envio final CTE',
        'Data Envio Final', 'Dt Envio Final'  # ‚≠ê ALTERNATIVAS IMPORTANTES
    ],
    'numero_fatura': [
        'Faturas', 'Fatura', 'Numero Fatura', 'N¬∫ Fatura',
        'N Fatura', 'Num Fatura'
    ],
    'observacao': [
        'OBSERVA√á√ÉO', 'Observacao', 'Obs', 'Observacoes',
        'Observa√ß√µes', 'Comentario', 'Coment√°rio'
    ]
}

# ============================================================================
# CONFIGURA√á√ïES DE PROCESSAMENTO
# ============================================================================

# Formatos de data suportados (ordem de prioridade)
FORMATOS_DATA = [
    '%d/%b/%y',      # 25/jul/24 (formato brasileiro com m√™s abreviado)
    '%d/%b/%Y',      # 25/jul/2024
    '%d/%m/%Y',      # 25/07/2024
    '%d-%m-%Y',      # 25-07-2024
    '%Y-%m-%d',      # 2024-07-25 (ISO)
    '%d/%m/%y',      # 25/07/24
    '%d-%m-%y',      # 25-07-24
    '%d.%m.%Y',      # 25.07.2024
    '%d.%m.%y',      # 25.07.24
    '%d %m %Y',      # 25 07 2024
    '%d %m %y'       # 25 07 24
]

# Configura√ß√µes de encoding para arquivos CSV
ENCODINGS_SUPORTADOS = [
    'utf-8',
    'cp1252',        # Windows-1252 (padr√£o Windows)
    'latin1',        # ISO-8859-1
    'iso-8859-1',
    'utf-8-sig'      # UTF-8 com BOM
]

# Separadores de CSV suportados
SEPARADORES_CSV = [';', ',', '\t', '|']

# ============================================================================
# VALIDA√á√ïES E REGRAS DE NEG√ìCIO
# ============================================================================

# Campos obrigat√≥rios para importa√ß√£o
CAMPOS_OBRIGATORIOS = [
    'numero_cte',
    'valor_total'
]

# Campos importantes para alertas (se ausentes, mostrar aviso)
CAMPOS_IMPORTANTES = [
    'destinatario_nome',
    'data_emissao',
    'primeiro_envio',
    'data_atesto',
    'envio_final'  # ‚≠ê CR√çTICO
]

# Campos para c√°lculo de varia√ß√µes de tempo
VARIACOES_TEMPO = [
    {
        'nome': 'CTE ‚Üí Inclus√£o Fatura',
        'campo_inicio': 'data_emissao',
        'campo_fim': 'data_inclusao_fatura',
        'codigo': 'cte_inclusao_fatura'
    },
    {
        'nome': 'Inclus√£o ‚Üí 1¬∫ Envio', 
        'campo_inicio': 'data_inclusao_fatura',
        'campo_fim': 'primeiro_envio',
        'codigo': 'inclusao_primeiro_envio'
    },
    {
        'nome': 'RQ/TMC ‚Üí 1¬∫ Envio',
        'campo_inicio': 'data_rq_tmc', 
        'campo_fim': 'primeiro_envio',
        'codigo': 'rq_tmc_primeiro_envio'
    },
    {
        'nome': '1¬∫ Envio ‚Üí Atesto',
        'campo_inicio': 'primeiro_envio',
        'campo_fim': 'data_atesto', 
        'codigo': 'primeiro_envio_atesto'
    },
    {
        'nome': 'Atesto ‚Üí Envio Final',  # ‚≠ê NOVA VARIA√á√ÉO
        'campo_inicio': 'data_atesto',
        'campo_fim': 'envio_final',
        'codigo': 'atesto_envio_final'
    },
    {
        'nome': 'Processo Completo',
        'campo_inicio': 'data_emissao',
        'campo_fim': 'envio_final',
        'codigo': 'processo_completo'
    },
    {
        'nome': 'CTE ‚Üí Baixa',
        'campo_inicio': 'data_emissao',
        'campo_fim': 'data_baixa',
        'codigo': 'cte_baixa'
    }
]

# ============================================================================
# FUN√á√ïES DE UTILIDADE
# ============================================================================

def obter_mapeamento_automatico(colunas_csv):
    """
    Gera mapeamento autom√°tico baseado nas colunas encontradas no CSV
    
    Args:
        colunas_csv (list): Lista de colunas encontradas no CSV
        
    Returns:
        dict: Mapeamento autom√°tico gerado
    """
    mapeamento = {}
    colunas_normalizadas = [col.strip() for col in colunas_csv]
    
    for campo_banco, possiveis_nomes in MAPEAMENTOS_ALTERNATIVOS.items():
        encontrado = False
        
        # Tentar mapeamento principal primeiro
        if MAPEAMENTO_PRINCIPAL[campo_banco] in colunas_normalizadas:
            mapeamento[campo_banco] = MAPEAMENTO_PRINCIPAL[campo_banco]
            encontrado = True
        else:
            # Tentar alternativas
            for nome_possivel in possiveis_nomes:
                if nome_possivel in colunas_normalizadas:
                    mapeamento[campo_banco] = nome_possivel
                    encontrado = True
                    break
        
        if not encontrado:
            mapeamento[campo_banco] = None
    
    return mapeamento

def validar_mapeamento(mapeamento):
    """
    Valida se o mapeamento tem os campos obrigat√≥rios
    
    Args:
        mapeamento (dict): Mapeamento a ser validado
        
    Returns:
        tuple: (bool, list) - (v√°lido, lista de problemas)
    """
    problemas = []
    
    # Verificar campos obrigat√≥rios
    for campo in CAMPOS_OBRIGATORIOS:
        if not mapeamento.get(campo):
            problemas.append(f"Campo obrigat√≥rio '{campo}' n√£o mapeado")
    
    # Verificar campos importantes
    campos_importantes_ausentes = []
    for campo in CAMPOS_IMPORTANTES:
        if not mapeamento.get(campo):
            campos_importantes_ausentes.append(campo)
    
    if campos_importantes_ausentes:
        problemas.append(f"Campos importantes ausentes: {', '.join(campos_importantes_ausentes)}")
    
    # Verifica√ß√£o especial para envio_final
    if not mapeamento.get('envio_final'):
        problemas.append("CR√çTICO: Campo 'envio_final' n√£o mapeado - isso causar√° problemas nas m√©tricas")
    
    return len(problemas) == 0, problemas

def gerar_relatorio_mapeamento(mapeamento, colunas_csv):
    """
    Gera relat√≥rio detalhado do mapeamento
    
    Args:
        mapeamento (dict): Mapeamento gerado
        colunas_csv (list): Colunas encontradas no CSV
        
    Returns:
        str: Relat√≥rio formatado
    """
    relatorio = []
    relatorio.append("=" * 60)
    relatorio.append("RELAT√ìRIO DE MAPEAMENTO DE COLUNAS")
    relatorio.append("=" * 60)
    relatorio.append(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    relatorio.append(f"Vers√£o Config: {CONFIG_VERSION}")
    relatorio.append("")
    
    # Estat√≠sticas
    campos_mapeados = sum(1 for v in mapeamento.values() if v)
    campos_total = len(mapeamento)
    colunas_total = len(colunas_csv)
    
    relatorio.append(f"üìä ESTAT√çSTICAS:")
    relatorio.append(f"   ‚Ä¢ Campos mapeados: {campos_mapeados}/{campos_total}")
    relatorio.append(f"   ‚Ä¢ Colunas no CSV: {colunas_total}")
    relatorio.append(f"   ‚Ä¢ Taxa de mapeamento: {(campos_mapeados/campos_total)*100:.1f}%")
    relatorio.append("")
    
    # Mapeamento detalhado
    relatorio.append("üéØ MAPEAMENTO DETALHADO:")
    for campo_banco, coluna_csv in mapeamento.items():
        if coluna_csv:
            status = "‚úÖ"
            if campo_banco in CAMPOS_OBRIGATORIOS:
                status += " [OBRIGAT√ìRIO]"
            elif campo_banco in CAMPOS_IMPORTANTES:
                status += " [IMPORTANTE]"
            
            # Especial para envio_final
            if campo_banco == 'envio_final':
                status += " [CR√çTICO]"
            
            relatorio.append(f"   {status} {campo_banco:20} -> '{coluna_csv}'")
        else:
            status = "‚ùå"
            if campo_banco in CAMPOS_OBRIGATORIOS:
                status += " [OBRIGAT√ìRIO AUSENTE]"
            elif campo_banco == 'envio_final':
                status += " [CR√çTICO AUSENTE]"
            
            relatorio.append(f"   {status} {campo_banco:20} -> N√ÉO MAPEADO")
    
    relatorio.append("")
    
    # Valida√ß√£o
    valido, problemas = validar_mapeamento(mapeamento)
    if valido:
        relatorio.append("‚úÖ VALIDA√á√ÉO: Mapeamento aprovado")
    else:
        relatorio.append("‚ùå VALIDA√á√ÉO: Problemas encontrados")
        for problema in problemas:
            relatorio.append(f"   ‚Ä¢ {problema}")
    
    relatorio.append("")
    relatorio.append("=" * 60)
    
    return "\n".join(relatorio)

def salvar_mapeamento_personalizado(mapeamento, nome_arquivo=None):
    """
    Salva mapeamento personalizado em arquivo
    
    Args:
        mapeamento (dict): Mapeamento a ser salvo
        nome_arquivo (str): Nome do arquivo (opcional)
        
    Returns:
        str: Caminho do arquivo salvo
    """
    if not nome_arquivo:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        nome_arquivo = f'mapeamento_personalizado_{timestamp}.py'
    
    conteudo = f'''# Mapeamento Personalizado - Dashboard Baker
# Gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
# Vers√£o: {CONFIG_VERSION}

MAPEAMENTO_PERSONALIZADO = {{
'''
    
    for campo, coluna in mapeamento.items():
        if coluna:
            conteudo += f"    '{campo}': '{coluna}',\n"
        else:
            conteudo += f"    '{campo}': None,  # N√ÉO MAPEADO\n"
    
    conteudo += '''
}

# Para usar este mapeamento:
# 1. Importe: from mapeamento_personalizado import MAPEAMENTO_PERSONALIZADO
# 2. Use no script de importa√ß√£o
'''
    
    with open(nome_arquivo, 'w', encoding='utf-8') as f:
        f.write(conteudo)
    
    return nome_arquivo

# ============================================================================
# CONFIGURA√á√ïES DE ALERTA
# ============================================================================

# Crit√©rios para alertas autom√°ticos
ALERTAS_CONFIG = {
    'ctes_sem_aprovacao': {
        'dias_limite': 7,
        'campo_referencia': 'data_emissao',
        'campo_verificacao': 'data_atesto',
        'descricao': 'CTEs sem aprova√ß√£o h√° mais de 7 dias'
    },
    'ctes_sem_faturas': {
        'dias_limite': 3,
        'campo_referencia': 'data_atesto', 
        'campo_verificacao': 'numero_fatura',
        'descricao': 'CTEs sem faturas h√° mais de 3 dias ap√≥s atesto'
    },
    'faturas_vencidas': {
        'dias_limite': 90,
        'campo_referencia': 'data_atesto',
        'campo_verificacao': 'data_baixa', 
        'descricao': 'Faturas vencidas h√° mais de 90 dias'
    },
    'envio_final_pendente': {  # ‚≠ê NOVO ALERTA
        'dias_limite': 5,
        'campo_referencia': 'data_atesto',
        'campo_verificacao': 'envio_final',
        'descricao': 'CTEs sem envio final h√° mais de 5 dias ap√≥s atesto'
    }
}

# ============================================================================
# CONFIGURA√á√ïES DE QUALIDADE DE DADOS
# ============================================================================

# Crit√©rios de qualidade para cada campo
QUALIDADE_CRITERIOS = {
    'numero_cte': {'minimo_preenchimento': 100, 'critico': True},
    'destinatario_nome': {'minimo_preenchimento': 80, 'critico': False},
    'valor_total': {'minimo_preenchimento': 95, 'critico': True},
    'data_emissao': {'minimo_preenchimento': 90, 'critico': False},
    'primeiro_envio': {'minimo_preenchimento': 70, 'critico': False},
    'data_atesto': {'minimo_preenchimento': 60, 'critico': False},
    'envio_final': {'minimo_preenchimento': 50, 'critico': True},  # ‚≠ê CR√çTICO
    'numero_fatura': {'minimo_preenchimento': 40, 'critico': False}
}

# ============================================================================
# EXEMPLO DE USO
# ============================================================================

if __name__ == "__main__":
    # Exemplo de como usar as configura√ß√µes
    
    print("üîß CONFIGURA√á√ÉO DE MAPEAMENTO - DASHBOARD BAKER")
    print("=" * 50)
    
    # Simular colunas de um CSV
    colunas_exemplo = [
        'CTE', 'Remetente - Nome', 'Ve√≠culo - Placa', 'Total',
        'Data emiss√£o Cte', 'Data RQ/TMC', '1¬∞ Envio', 
        'Data do atesto', 'Envio final', 'Faturas', 'OBSERVA√á√ÉO'
    ]
    
    print(f"üìã Colunas de exemplo: {len(colunas_exemplo)}")
    
    # Gerar mapeamento autom√°tico
    mapeamento = obter_mapeamento_automatico(colunas_exemplo)
    
    # Gerar relat√≥rio
    relatorio = gerar_relatorio_mapeamento(mapeamento, colunas_exemplo)
    print(relatorio)
    
    # Validar
    valido, problemas = validar_mapeamento(mapeamento)
    
    if valido:
        print("‚úÖ Mapeamento v√°lido para uso")
    else:
        print("‚ùå Problemas no mapeamento:")
        for problema in problemas:
            print(f"   ‚Ä¢ {problema}")
    
    # Salvar exemplo
    arquivo_salvo = salvar_mapeamento_personalizado(mapeamento)
    print(f"\nüíæ Exemplo salvo em: {arquivo_salvo}")
    
    print("\nüéØ Para usar em produ√ß√£o:")
    print("   1. Importe as configura√ß√µes: from config_mapeamento_colunas import *") 
    print("   2. Use obter_mapeamento_automatico(suas_colunas)")
    print("   3. Valide com validar_mapeamento(mapeamento)")
    print("   4. Use o mapeamento na importa√ß√£o")