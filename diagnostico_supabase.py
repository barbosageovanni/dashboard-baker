#!/usr/bin/env python3
"""
Script de Diagn√≥stico - Conex√£o Supabase
Identifica problemas espec√≠ficos de conex√£o
"""

import os
import psycopg2
from psycopg2 import OperationalError, DatabaseError

def testar_conexao_detalhada():
    """Testa conex√£o com detalhes completos de erro"""
    
    print("üîç DIAGN√ìSTICO DE CONEX√ÉO SUPABASE")
    print("="*50)
    
    # Configura√ß√µes esperadas
    configs = {
        'DB_HOST': os.getenv('DB_HOST'),
        'DB_DATABASE': os.getenv('DB_DATABASE'), 
        'DB_USER': os.getenv('DB_USER'),
        'DB_PASSWORD': os.getenv('DB_PASSWORD'),
        'DB_PORT': os.getenv('DB_PORT'),
        'SUPABASE_HOST': os.getenv('SUPABASE_HOST'),
        'SUPABASE_DB': os.getenv('SUPABASE_DB'),
        'SUPABASE_USER': os.getenv('SUPABASE_USER'),
        'SUPABASE_PASSWORD': os.getenv('SUPABASE_PASSWORD'),
        'SUPABASE_PORT': os.getenv('SUPABASE_PORT'),
        'DATABASE_ENVIRONMENT': os.getenv('DATABASE_ENVIRONMENT')
    }
    
    print("üìã VARI√ÅVEIS DE AMBIENTE:")
    for key, value in configs.items():
        if value:
            if 'PASSWORD' in key:
                print(f"‚úÖ {key}: {'*' * len(value)}")
            else:
                print(f"‚úÖ {key}: {value}")
        else:
            print(f"‚ùå {key}: N√ÉO DEFINIDA")
    
    print("\n" + "="*50)
    
    # Configura√ß√£o de conex√£o
    config = {
        'host': configs['SUPABASE_HOST'] or configs['DB_HOST'],
        'database': configs['SUPABASE_DB'] or configs['DB_DATABASE'],
        'user': configs['SUPABASE_USER'] or configs['DB_USER'], 
        'password': configs['SUPABASE_PASSWORD'] or configs['DB_PASSWORD'],
        'port': int(configs['SUPABASE_PORT'] or configs['DB_PORT'] or '5432'),
        'sslmode': 'require',
        'connect_timeout': 30
    }
    
    print("üîß CONFIGURA√á√ÉO DE CONEX√ÉO:")
    for key, value in config.items():
        if key == 'password':
            print(f"‚úÖ {key}: {'*' * len(str(value))}")
        else:
            print(f"‚úÖ {key}: {value}")
    
    print("\n" + "="*50)
    print("üîå TESTANDO CONEX√ÉO...")
    
    try:
        # Teste de conex√£o detalhado
        print("1Ô∏è‚É£ Tentando conectar...")
        conn = psycopg2.connect(**config)
        print("‚úÖ Conex√£o estabelecida!")
        
        print("2Ô∏è‚É£ Testando cursor...")
        cursor = conn.cursor()
        print("‚úÖ Cursor criado!")
        
        print("3Ô∏è‚É£ Executando query de teste...")
        cursor.execute("SELECT 1 as test")
        result = cursor.fetchone()
        print(f"‚úÖ Query executada! Resultado: {result}")
        
        print("4Ô∏è‚É£ Verificando permiss√µes...")
        cursor.execute("SELECT current_user, current_database(), version()")
        user_info = cursor.fetchone()
        print(f"‚úÖ Usu√°rio: {user_info[0]}")
        print(f"‚úÖ Database: {user_info[1]}")
        print(f"‚úÖ Vers√£o PostgreSQL: {user_info[2][:50]}...")
        
        print("5Ô∏è‚É£ Testando acesso a tabelas...")
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            LIMIT 5
        """)
        tables = cursor.fetchall()
        print(f"‚úÖ Tabelas encontradas: {len(tables)}")
        for table in tables[:3]:
            print(f"   üìã {table[0]}")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ CONEX√ÉO TOTALMENTE FUNCIONAL!")
        return True
        
    except OperationalError as e:
        print(f"\n‚ùå ERRO OPERACIONAL:")
        print(f"   C√≥digo: {e.pgcode}")
        print(f"   Mensagem: {e.pgerror}")
        print(f"   Detalhes: {str(e)}")
        
        if "authentication failed" in str(e).lower():
            print("\nüîç DIAGN√ìSTICO: Problema de autentica√ß√£o")
            print("   ‚û°Ô∏è Verifique usu√°rio e senha")
            print("   ‚û°Ô∏è Confirme se o usu√°rio tem acesso ao banco")
        elif "connection refused" in str(e).lower():
            print("\nüîç DIAGN√ìSTICO: Conex√£o recusada")
            print("   ‚û°Ô∏è Verifique host e porta")
            print("   ‚û°Ô∏è Confirme se o servidor est√° online")
        elif "timeout" in str(e).lower():
            print("\nüîç DIAGN√ìSTICO: Timeout de conex√£o")
            print("   ‚û°Ô∏è Problema de rede ou firewall")
        
        return False
        
    except DatabaseError as e:
        print(f"\n‚ùå ERRO DE BANCO:")
        print(f"   C√≥digo: {e.pgcode}")
        print(f"   Mensagem: {e.pgerror}")
        print(f"   Detalhes: {str(e)}")
        return False
        
    except Exception as e:
        print(f"\n‚ùå ERRO GERAL:")
        print(f"   Tipo: {type(e).__name__}")
        print(f"   Mensagem: {str(e)}")
        return False

if __name__ == "__main__":
    testar_conexao_detalhada()
