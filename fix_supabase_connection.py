#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Corre√ß√£o Espec√≠fica para Conex√£o Supabase
Diagnostica e corrige problemas de conectividade com Supabase PostgreSQL

Execute: python fix_supabase_connection.py
"""

import os
import socket
import psycopg2
import time
from datetime import datetime
import subprocess
import sys

class FixSupabase:
    """Diagn√≥stico e corre√ß√£o para problemas Supabase"""
    
    def __init__(self):
        self.supabase_host = "db.lijtncazuwnbydeqtoyz.supabase.co"
        self.supabase_port = 5432
        self.resultados = {}
    
    def teste_conectividade_rede(self):
        """Testa conectividade b√°sica de rede"""
        print("üåê Testando conectividade de rede...")
        
        try:
            # Teste de resolu√ß√£o DNS
            import socket
            ip = socket.gethostbyname(self.supabase_host)
            print(f"‚úÖ DNS OK: {self.supabase_host} ‚Üí {ip}")
            self.resultados['dns'] = True
            
            # Teste de ping
            if os.name == "nt":  # Windows
                ping_cmd = f"ping -n 1 {self.supabase_host}"
            else:  # Linux/Mac
                ping_cmd = f"ping -c 1 {self.supabase_host}"
            
            result = subprocess.run(ping_cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Ping OK: Servidor acess√≠vel")
                self.resultados['ping'] = True
            else:
                print("‚ùå Ping FALHOU: Poss√≠vel problema de rede/firewall")
                self.resultados['ping'] = False
            
            # Teste de porta TCP
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)
            
            result = sock.connect_ex((ip, self.supabase_port))
            sock.close()
            
            if result == 0:
                print(f"‚úÖ Porta {self.supabase_port} ABERTA")
                self.resultados['porta'] = True
            else:
                print(f"‚ùå Porta {self.supabase_port} FECHADA ou BLOQUEADA")
                self.resultados['porta'] = False
                
        except socket.gaierror:
            print("‚ùå DNS FALHOU: N√£o foi poss√≠vel resolver o hostname")
            self.resultados['dns'] = False
        except Exception as e:
            print(f"‚ùå Erro de rede: {e}")
            self.resultados['rede'] = False
    
    def teste_credenciais_supabase(self):
        """Testa diferentes combina√ß√µes de credenciais"""
        print("\nüîê Testando credenciais Supabase...")
        
        # Poss√≠veis combina√ß√µes de credenciais
        credenciais_teste = [
            {
                'host': self.supabase_host,
                'database': 'postgres',
                'user': 'postgres',
                'password': os.getenv('SUPABASE_PASSWORD', ''),
                'port': 5432,
                'sslmode': 'require'
            },
            # Outras varia√ß√µes comuns
            {
                'host': self.supabase_host,
                'database': 'postgres',
                'user': 'postgres.lijtncazuwnbydeqtoyz',  # Formato alternativo
                'password': os.getenv('SUPABASE_PASSWORD', ''),
                'port': 5432,
                'sslmode': 'require'
            }
        ]
        
        for i, cred in enumerate(credenciais_teste, 1):
            if not cred['password']:
                print(f"‚ö†Ô∏è Teste {i}: Senha n√£o configurada")
                continue
                
            print(f"üîç Teste {i}: {cred['user']}@{cred['host']}")
            
            try:
                conn = psycopg2.connect(**cred)
                cursor = conn.cursor()
                cursor.execute("SELECT version();")
                version = cursor.fetchone()[0]
                cursor.close()
                conn.close()
                
                print(f"‚úÖ SUCESSO! Conectado com credenciais do teste {i}")
                print(f"üìä PostgreSQL: {version[:50]}...")
                self.resultados['auth'] = True
                return cred
                
            except psycopg2.OperationalError as e:
                error_msg = str(e)
                if "authentication failed" in error_msg:
                    print(f"‚ùå Teste {i}: Credenciais inv√°lidas")
                elif "Cannot assign requested address" in error_msg:
                    print(f"‚ùå Teste {i}: Problema de rede (endere√ßo)")
                elif "Connection refused" in error_msg:
                    print(f"‚ùå Teste {i}: Conex√£o recusada")
                else:
                    print(f"‚ùå Teste {i}: {error_msg[:80]}...")
                    
            except Exception as e:
                print(f"‚ùå Teste {i}: Erro - {str(e)[:80]}...")
        
        print("‚ùå Todos os testes de credenciais falharam")
        self.resultados['auth'] = False
        return None
    
    def verificar_configuracao_local(self):
        """Verifica configura√ß√£o local do sistema"""
        print("\nüñ•Ô∏è Verificando configura√ß√£o local...")
        
        # Verificar bibliotecas Python
        try:
            import psycopg2
            print(f"‚úÖ psycopg2 instalado: v{psycopg2.__version__}")
        except ImportError:
            print("‚ùå psycopg2 N√ÉO instalado")
            print("üí° Execute: pip install psycopg2-binary")
            return False
        
        # Verificar arquivo .env
        if os.path.exists('.env'):
            print("‚úÖ Arquivo .env encontrado")
            
            with open('.env', 'r') as f:
                env_content = f.read()
                
            if 'SUPABASE_PASSWORD' in env_content:
                if os.getenv('SUPABASE_PASSWORD'):
                    print("‚úÖ SUPABASE_PASSWORD configurado")
                else:
                    print("‚ùå SUPABASE_PASSWORD vazio ou n√£o carregado")
            else:
                print("‚ùå SUPABASE_PASSWORD n√£o encontrado no .env")
        else:
            print("‚ùå Arquivo .env n√£o encontrado")
            return False
        
        # Verificar proxy/firewall
        http_proxy = os.getenv('HTTP_PROXY') or os.getenv('http_proxy')
        https_proxy = os.getenv('HTTPS_PROXY') or os.getenv('https_proxy')
        
        if http_proxy or https_proxy:
            print(f"‚ö†Ô∏è Proxy detectado: HTTP={http_proxy}, HTTPS={https_proxy}")
            print("üí° Proxies podem bloquear conex√µes PostgreSQL")
        else:
            print("‚úÖ Nenhum proxy detectado")
        
        return True
    
    def gerar_solucoes(self):
        """Gera solu√ß√µes baseadas nos resultados dos testes"""
        print("\n" + "="*50)
        print("üí° SOLU√á√ïES RECOMENDADAS")
        print("="*50)
        
        if not self.resultados.get('dns', True):
            print("\nüåê PROBLEMA DE DNS:")
            print("‚Ä¢ Verifique sua conex√£o com a internet")
            print("‚Ä¢ Tente usar DNS p√∫blico: 8.8.8.8, 1.1.1.1")
            print("‚Ä¢ Execute: nslookup db.lijtncazuwnbydeqtoyz.supabase.co")
        
        if not self.resultados.get('ping', True):
            print("\nüî• PROBLEMA DE FIREWALL/REDE:")
            print("‚Ä¢ Desative temporariamente o firewall para teste")
            print("‚Ä¢ Verifique se seu provedor bloqueia porta 5432")
            print("‚Ä¢ Use VPN se estiver em rede corporativa")
            print("‚Ä¢ Teste de outra rede (mobile hotspot)")
        
        if not self.resultados.get('porta', True):
            print("\nüö™ PROBLEMA DE PORTA:")
            print("‚Ä¢ Porta 5432 est√° bloqueada")
            print("‚Ä¢ Configure firewall para permitir sa√≠da na porta 5432")
            print("‚Ä¢ Teste com telnet: telnet db.lijtncazuwnbydeqtoyz.supabase.co 5432")
        
        if not self.resultados.get('auth', True):
            print("\nüîê PROBLEMA DE CREDENCIAIS:")
            print("‚Ä¢ Verifique senha no painel Supabase:")
            print("  1. Acesse https://supabase.com/dashboard")
            print("  2. V√° em Settings ‚Üí Database")
            print("  3. Copie as credenciais corretas")
            print("‚Ä¢ Atualize arquivo .env com senha correta")
            print("‚Ä¢ Verifique se n√£o expirou o token/senha")
        
        print("\nüîÑ ALTERNATIVAS:")
        print("‚Ä¢ Use PostgreSQL local temporariamente")
        print("‚Ä¢ Considere Railway, Render ou outro provedor")
        print("‚Ä¢ Configure t√∫nel SSH se dispon√≠vel")
        
        print("\nüìù CONFIGURA√á√ÉO ALTERNATIVA:")
        print("Crie arquivo 'config_local.py' com:")
        print("""
config = {
    'host': 'localhost',
    'database': 'dashboard_baker',
    'user': 'postgres', 
    'password': 'senha123',
    'port': 5432
}
""")
    
    def criar_config_fallback(self):
        """Cria configura√ß√£o de fallback local"""
        
        config_fallback = '''# Configura√ß√£o de fallback - PostgreSQL Local
# Use este arquivo se Supabase n√£o funcionar

import os

def get_database_config():
    """Retorna configura√ß√£o do banco local"""
    
    # Primeiro, tenta Supabase se credenciais dispon√≠veis
    supabase_password = os.getenv('SUPABASE_PASSWORD')
    
    if supabase_password:
        supabase_config = {
            'host': 'db.lijtncazuwnbydeqtoyz.supabase.co',
            'database': 'postgres',
            'user': 'postgres',
            'password': supabase_password,
            'port': 5432,
            'sslmode': 'require',
            'connect_timeout': 10
        }
        
        # Testar conex√£o Supabase
        try:
            import psycopg2
            conn = psycopg2.connect(**supabase_config)
            conn.close()
            print("‚úÖ Usando Supabase PostgreSQL")
            return supabase_config
        except:
            print("‚ö†Ô∏è Supabase falhou, usando PostgreSQL local")
    
    # Fallback para PostgreSQL local
    local_config = {
        'host': 'localhost',
        'database': 'dashboard_baker',
        'user': 'postgres',
        'password': 'senha123',
        'port': 5432
    }
    
    print("‚úÖ Usando PostgreSQL local")
    return local_config
'''
        
        try:
            with open('config_fallback.py', 'w', encoding='utf-8') as f:
                f.write(config_fallback)
            print("\n‚úÖ Arquivo config_fallback.py criado!")
            print("üí° Importe este arquivo no dashboard se necess√°rio")
        except Exception as e:
            print(f"‚ùå Erro ao criar config_fallback.py: {e}")
    
    def executar_diagnostico_completo(self):
        """Executa diagn√≥stico completo"""
        
        print("üîç DIAGN√ìSTICO SUPABASE POSTGRESQL")
        print("="*50)
        print(f"Host: {self.supabase_host}")
        print(f"Porta: {self.supabase_port}")
        print(f"Timestamp: {datetime.now()}")
        print()
        
        # 1. Verificar configura√ß√£o local
        if not self.verificar_configuracao_local():
            print("‚ùå Configura√ß√£o local inv√°lida, parando diagn√≥stico")
            return
        
        # 2. Testar conectividade
        self.teste_conectividade_rede()
        
        # 3. Testar credenciais (s√≥ se rede OK)
        if self.resultados.get('dns', False) and self.resultados.get('porta', False):
            credenciais_funcionais = self.teste_credenciais_supabase()
            
            if credenciais_funcionais:
                print("\nüéâ PROBLEMA RESOLVIDO!")
                print("‚úÖ Conex√£o Supabase funcionando")
                return credenciais_funcionais
        
        # 4. Gerar solu√ß√µes
        self.gerar_solucoes()
        
        # 5. Criar fallback
        self.criar_config_fallback()
        
        return None

def main():
    """Fun√ß√£o principal"""
    
    # Carregar .env se existir
    if os.path.exists('.env'):
        try:
            from dotenv import load_dotenv
            load_dotenv()
        except ImportError:
            # Carregar manualmente se python-dotenv n√£o dispon√≠vel
            with open('.env', 'r') as f:
                for linha in f:
                    linha = linha.strip()
                    if linha and not linha.startswith('#') and '=' in linha:
                        chave, valor = linha.split('=', 1)
                        os.environ[chave] = valor
    
    # Executar diagn√≥stico
    fix_supabase = FixSupabase()
    resultado = fix_supabase.executar_diagnostico_completo()
    
    if resultado:
        print("\n‚úÖ Use estas credenciais no seu dashboard:")
        for key, value in resultado.items():
            if key != 'password':
                print(f"  {key}: {value}")
            else:
                print(f"  {key}: {'*' * len(str(value))}")
    else:
        print("\n‚ùå Problema n√£o resolvido automaticamente")
        print("üìû Entre em contato com suporte Supabase se problema persistir")

if __name__ == "__main__":
    main()