#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCRIPT FINAL - Dashboard Baker v3.0
Diagn√≥stico + Instru√ß√µes + Monitor + Verifica√ß√£o autom√°tica
"""

import requests
import time
import sys
import re
from datetime import datetime

class UltimateFixer:
    def __init__(self):
        self.url = "https://dashboard-transpontual.streamlit.app/"
        self.github_repo = "barbosageovanni/dashboard-baker"
        self.expected_indicators = [
            "Dashboard Financeiro Baker - Sistema Avan√ßado",
            "Gest√£o Inteligente de Faturamento", 
            "PostgreSQL",
            "v3.0",
            "389"
        ]
    
    def print_header(self, title, icon="üéØ"):
        """Imprime cabe√ßalho formatado"""
        print(f"\n{icon} {title}")
        print("=" * (len(title) + 4))
    
    def log(self, message, level="INFO"):
        """Log formatado"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        icons = {"INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "WARNING": "‚ö†Ô∏è", "ERROR": "‚ùå", "CRITICAL": "üö®"}
        print(f"[{timestamp}] {icons.get(level, '‚ÑπÔ∏è')} {message}")
    
    def diagnose_current_app(self):
        """Diagn√≥stico detalhado da app atual"""
        self.print_header("DIAGN√ìSTICO DA APP ATUAL", "üîç")
        
        try:
            response = requests.get(self.url, timeout=30)
            content = response.text
            
            self.log(f"Status HTTP: {response.status_code}", "SUCCESS" if response.status_code == 200 else "ERROR")
            self.log(f"Tamanho do conte√∫do: {len(content):,} caracteres", "INFO")
            
            # Contar indicadores da vers√£o nova
            found_indicators = []
            for indicator in self.expected_indicators:
                if indicator in content:
                    found_indicators.append(indicator)
            
            score = len(found_indicators)
            total = len(self.expected_indicators)
            
            self.log(f"Indicadores da v3.0 encontrados: {score}/{total}", 
                    "SUCCESS" if score >= 4 else "WARNING" if score >= 2 else "ERROR")
            
            # Mostrar detalhes
            for indicator in self.expected_indicators:
                status = "‚úÖ" if indicator in content else "‚ùå"
                print(f"   {status} {indicator}")
            
            return score, total, content
            
        except Exception as e:
            self.log(f"Erro ao acessar app: {e}", "ERROR")
            return 0, len(self.expected_indicators), ""
    
    def show_streamlit_instructions(self):
        """Mostra instru√ß√µes espec√≠ficas para Streamlit Cloud"""
        self.print_header("INSTRU√á√ïES STREAMLIT CLOUD", "üì±")
        
        instructions = """
üö® SUA APP EST√Å USANDO VERS√ÉO ANTIGA - A√á√ÉO NECESS√ÅRIA:

üìç ACESSE: https://share.streamlit.io/

üóëÔ∏è DELETAR APP ATUAL:
   1. Encontre: "dashboard-transpontual"
   2. Clique nos 3 pontinhos (‚ãØ)
   3. Escolha "Delete app"
   4. Confirme a exclus√£o

‚ûï CRIAR APP NOVA:
   5. Clique "New app"
   6. Repository: barbosageovanni/dashboard-baker
   7. Branch: main
   8. Main file: dashboard_baker_web_corrigido.py
   9. App URL: dashboard-transpontual

üîë CONFIGURAR SECRETS:
   10. Settings > Secrets
   11. Cole EXATAMENTE:

PGHOST = "db.lijtncazuwnbydeqtoyz.supabase.co"
PGDATABASE = "postgres"
PGUSER = "postgres" 
PGPASSWORD = "SEQAg17334"
PGPORT = "5432"

‚è≥ AGUARDAR: 3-8 minutos para deploy completo
        """
        
        print(instructions)
        
        # Salvar instru√ß√µes em arquivo
        with open("STREAMLIT_INSTRUCTIONS.txt", "w", encoding="utf-8") as f:
            f.write(instructions)
        
        self.log("Instru√ß√µes salvas em: STREAMLIT_INSTRUCTIONS.txt", "SUCCESS")
    
    def monitor_until_success(self, max_minutes=15):
        """Monitora at√© sucesso ou timeout"""
        self.print_header(f"MONITORAMENTO POR {max_minutes} MINUTOS", "üîÑ")
        
        start_time = time.time()
        attempt = 1
        
        while time.time() - start_time < (max_minutes * 60):
            elapsed_min = int((time.time() - start_time) / 60)
            
            self.log(f"Tentativa {attempt} ({elapsed_min}min decorridos)", "INFO")
            
            score, total, content = self.diagnose_current_app()
            
            if score >= 4:
                self.log("üéâ SUCESSO! App atualizada detectada!", "SUCCESS")
                self.log(f"Dashboard funcionando: {self.url}", "SUCCESS") 
                return True
            elif score >= 2:
                self.log("Deploy parcial - aguardando conclus√£o...", "WARNING")
            elif score == 0:
                self.log("Vers√£o antiga ainda ativa", "ERROR")
                if attempt <= 3:
                    self.log("üí° Se ainda n√£o fez: DELETE e RECRIE a app!", "WARNING")
            
            # Esperar mais tempo entre tentativas conforme progresso
            wait_seconds = 60 if score >= 2 else 90
            self.log(f"Aguardando {wait_seconds}s para pr√≥xima verifica√ß√£o...", "INFO")
            time.sleep(wait_seconds)
            attempt += 1
        
        # Timeout
        self.log("‚è∞ TIMEOUT - App n√£o atualizou no tempo esperado", "ERROR")
        return False
    
    def run_complete_flow(self):
        """Executa o fluxo completo"""
        self.print_header("DASHBOARD BAKER v3.0 - CORRE√á√ÉO FINAL", "üöÄ")
        
        print(f"üåê URL da app: {self.url}")
        print(f"üìÅ Repository: {self.github_repo}")
        print(f"‚è∞ Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # 1. Diagn√≥stico inicial
        initial_score, total, _ = self.diagnose_current_app()
        
        # 2. Decidir a√ß√£o baseada no score
        if initial_score >= 4:
            self.log("üéâ APP J√Å EST√Å ATUALIZADA!", "SUCCESS")
            self.log("Sistema funcionando corretamente", "SUCCESS")
            return True
        
        elif initial_score >= 2:
            self.log("Deploy parcial detectado - monitorando...", "WARNING")
            return self.monitor_until_success(10)
        
        else:
            self.log("üö® APP USANDO VERS√ÉO ANTIGA", "CRITICAL")
            self.show_streamlit_instructions()
            
            # Perguntar se quer monitorar
            print("\n" + "="*50)
            print("ü§î PR√ìXIMOS PASSOS:")
            print("A. Execute as instru√ß√µes acima no Streamlit Cloud")
            print("B. Depois execute novamente este script para monitorar")
            print("OU")
            print("C. Digite 'monitor' para monitorar agora (se j√° fez os passos)")
            
            choice = input("\nDigite 'monitor' para monitorar ou Enter para sair: ").strip().lower()
            
            if choice == 'monitor':
                print("\nüîÑ Iniciando monitoramento...")
                return self.monitor_until_success(15)
            else:
                print("\nüí° Execute as instru√ß√µes e rode o script novamente!")
                return False
    
    def quick_check(self):
        """Verifica√ß√£o r√°pida"""
        self.print_header("VERIFICA√á√ÉO R√ÅPIDA", "‚ö°")
        
        score, total, _ = self.diagnose_current_app()
        
        if score >= 4:
            self.log("üéâ SISTEMA 100% FUNCIONAL!", "SUCCESS")
            return True
        elif score >= 2:
            self.log("Sistema parcialmente atualizado", "WARNING")
            return False
        else:
            self.log("Sistema precisa de atualiza√ß√£o", "ERROR")
            return False

def main():
    """Fun√ß√£o principal"""
    fixer = UltimateFixer()
    
    print("üéØ ULTIMATE FIX SCRIPT - Dashboard Baker v3.0")
    print("Modo de uso:")
    print("  python ultimate_fix_script.py           # Fluxo completo")
    print("  python ultimate_fix_script.py --quick   # Verifica√ß√£o r√°pida")
    print("  python ultimate_fix_script.py --monitor # Apenas monitorar")
    print()
    
    if len(sys.argv) > 1:
        if sys.argv[1] == '--quick':
            success = fixer.quick_check()
            return 0 if success else 1
        elif sys.argv[1] == '--monitor':
            success = fixer.monitor_until_success(15)
            return 0 if success else 1
    
    # Fluxo completo
    success = fixer.run_complete_flow()
    
    # Resultado final
    if success:
        print("\n" + "="*60)
        print("üéâ MISS√ÉO CUMPRIDA!")
        print("‚úÖ Dashboard Baker v3.0 est√° 100% funcional")
        print(f"üåê Acesse: {fixer.url}")
        print("üìä Sistema pronto para uso em produ√ß√£o")
        print("="*60)
        return 0
    else:
        print("\n" + "="*60)
        print("‚ö†Ô∏è A√á√ÉO MANUAL NECESS√ÅRIA")
        print("üîß Execute as instru√ß√µes no Streamlit Cloud")
        print("üì± Depois rode: python ultimate_fix_script.py --monitor")
        print("="*60)
        return 1

if __name__ == "__main__":
    sys.exit(main())